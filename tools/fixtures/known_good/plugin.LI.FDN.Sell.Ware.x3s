* Author: Logain Abler
* -----------------------------------------------------------------------------------
* This script is called by LI.FDN.Supply.Factory
* It is used to buy a ware needed for production

* Expected values:
* - Factory
* - Ware
* - Amount

* Returns values:
* - N/A

* To Do - Debug

* Version: 1.0
* Date: 22/05/2012
* Tested: 22/05/2012
* -----------------------------------------------------------------------------------

* Fetch values saved in the AL Plugin global variable:
* - DC
$script = get script name
$al.Settings = get global variable: name='al.LI.FDN.event'
if $al.Settings
$PageID = $al.Settings[1]
$DebugID = 0 + $PageID
$exclude.array = $al.Settings[8]
else
return null
end
* -----------------------------------------------------------------------------------

$sector.array = null-> call script 'plugin.LI.FDN.Sector.Array' : search=3
$pointer = sprintf: pageid=$PageID textid=4000, $ware, null, null, null, null
$ware.settings = $dock-> get local variable: name=$pointer
$sell.at = $ware.settings[6]
* -----------------------------------------------------------------------------------

$s = size of array $sector.array
while $s > 0
dec $s

$ware.settings = $dock-> get local variable: name=$pointer
$virtual.stock = $ware.settings[0]
$physical.stock = $dock-> get amount of ware $ware in cargo bay
$stock = $virtual.stock + $physical.stock
$sell = $ware.settings[5]
$amount = $stock - $sell
* -----------------------------------------------------------------------------------

if $al.Settings[7]
$txt.debug = 'Dock Virtual Stock ' + $virtual.stock + ' for ' + $ware
gosub Debug.Sub:
$txt.debug = 'Dock Physical Stock ' + $physical.stock + ' for ' + $ware
gosub Debug.Sub:
$txt.debug = 'Has ' + $amount + ' of ' + $ware + ' free to sell'
gosub Debug.Sub:
end
* -----------------------------------------------------------------------------------

if not $amount > 0
return null
end

$sector = $sector.array[$s]
$sell.Station = find factory: buys $ware with best price: min.price=$sell.at, amount=null, max.jumps=0, startsector=$sector, trader=null, exclude array=$exclude.array
* -----------------------------------------------------------------------------------

if $sell.Station
$relation = $dock-> get relation to object $sell.Station
if not $relation == [Foe]

$drone = create ship: type={Argon Mercury Super Freighter XL} owner=[Player] addto=$sell.Station x=null y=null z=null
$drone-> set homebase to $dock
$drone.max = $drone-> get max amount of ware $ware that can be stored in cargo bay
* -----------------------------------------------------------------------------------

if $amount > $drone.max
$sell.amount = $drone.max

if $al.Settings[7]
$txt.debug = 'Drone has ' + $drone.max + ' of ' + $ware + ' to sell'
gosub Debug.Sub:
end
else
$sell.amount = $amount

if $al.Settings[7]
$txt.debug = 'Drone has ' + $sell.amount + ' of ' + $ware + ' to sell'
gosub Debug.Sub:
end
end
* -----------------------------------------------------------------------------------

= $drone-> add $sell.amount units of $ware
$sold = $drone-> sell $sell.amount units of $ware
$drone-> destruct: show no explosion=[TRUE]
* -----------------------------------------------------------------------------------
if $sold > 0

if $al.Settings[7]
$txt.debug = 'Sold ' + $sold + ' for ' + $ware
gosub Debug.Sub:
end

$amount = $amount - $sold
* -----------------------------------------------------------------------------------
if $al.Settings[7]
$txt.debug = 'To sell amount is now ' + $amount + ' for ' + $ware
gosub Debug.Sub:
end

= null-> call script 'plugin.LI.FDN.Update.Ware' : ware=$ware amount=$sold station=$dock action='remove'
* -----------------------------------------------------------------------------------
end
end

end

* wait
= wait randomly from 500 to 1000 ms
* -----------------------------------------------------------------------------------
end
return null
* -----------------------------------------------------------------------------------

* Debug Massage handling
Debug.Sub:
$d.time = playing time
$d.time = format time: $d.time
$txt = $d.time + ';' + $script + ';' + $dock + ';' + $txt.debug
write to log file $DebugID append=[TRUE] value=$txt
endsub
* -----------------------------------------------------------------------------------
return null

