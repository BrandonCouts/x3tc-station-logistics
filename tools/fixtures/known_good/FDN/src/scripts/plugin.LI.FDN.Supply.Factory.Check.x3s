#name: plugin.LI.FDN.Supply.Factory.Check
#lang: 44
#origin_mod: FDN
#source: mods/FDN/scripts/plugin.LI.FDN.Supply.Factory.Check.xml

* Author: Logain Abler
* -----------------------------------------------------------------------------------
* This script is called by LI.FDN.Menu.Supply.Start script if there is a valid
* factory array stored in the AL Plugin variable
* The script contains the checks made on the factory before calling LI.FDN.Menu.Supply.Factory
* The script will also remove any non-existing factories from the stored array

* Expected values:
* - N/A the Factory array is stored in the AL Plugin variable

* Returns values:
* - N/A

* To Do - N/A

* Version: 2.0
* Date: 27/07/2012
* Tested: 27/07/2012
* -----------------------------------------------------------------------------------

* Fetch values saved in the AL Plugin global variable:
* - factory array - holds all the know player factories
$script = = get script name
$al.Settings = get global variable: name='al.LI.FDN.event'
if $al.Settings
$PageID = $al.Settings[1]
$DebugID = 0 + $PageID
$factory.array = $al.Settings[3]
else
return null
end
* -----------------------------------------------------------------------------------

* v2 change - Check to reverse array every other call
if not $al.Settings[12]
$al.Settings[12] = 1
else
$factory.array = reverse array $factory.array
$al.Settings[12] = null
end
set global variable: name='al.LI.FDN.event' value=$al.Settings
* -----------------------------------------------------------------------------------

$s = size of array $factory.array
* v2 - modify wait depending on number of factories
if $s > 500
$wait.1 = 20
$wait.2 = 50
else if $s > 300
$wait.1 = 50
$wait.2 = 100
else
$wait.1 = 100
$wait.2 = 200
end
* -----------------------------------------------------------------------------------

* start of While Loop - Loop is for Factories
while $s > 0
dec $s =
$factory = $factory.array[$s]
* check if factory exists
if $factory  ->  exists
* fetch local variable that hold the faction settings
$pointer = = read text: page=$PageID id=4001
if not $factory  ->  get local variable: name=$pointer
$settings.array = = array alloc: size=6
$factory  ->  set local variable: name=$pointer value=$settings.array
end
$settings.array = $factory  ->  get local variable: name=$pointer
* -----------------------------------------------------------------------------------

* check if this is a new factory and flag as found
* I use this to only manage the setting on first find and not every search
* so player can still change settings with auto manage on
if not $settings.array[2]
$settings.array[2] = 1
* check auto manage setting if set turn on at factory
if $al.Settings[9]
$settings.array[0] = 1
$settings.array[1] = 1
end
$factory  ->  set local variable: name=$pointer value=$settings.array
end
* -----------------------------------------------------------------------------------

* if product is managed call plugin.LI.FDN.Supply.Factory:
* factory
if $settings.array[0]
* debug
if $al.Settings[7]
$txt.debug = ' Supply Factort called flag = 1'
gosub Debug.Sub:
end
* call the supply factory script, flag one for the factory to pass its product to the DC
START  = null -> call script plugin.LI.FDN.Supply.Factory : factory=$factory  flag=1
* -----------------------------------------------------------------------------------
end
* -----------------------------------------------------------------------------------

* if product is managed call plugin.LI.FDN.Supply.Factory:
* factory
if $settings.array[1]
* check.time and full.time is used to see if the factory is stalled
$check.time = = $factory  ->  get remaining production cycle time
$full.time = = $factory  ->  get production cycle time: account for secondary resources=[FALSE]
* -----------------------------------------------------------------------------------

* debug
if $al.Settings[7]
$txt.debug = ' Check time = ' + $check.time + ' Full Time = ' + $full.time
gosub Debug.Sub:
end
* If stalled
if $check.time == $full.time
* debug
if $al.Settings[7]
$txt.debug = ' Prdouction stalled - Supply Resource called'
gosub Debug.Sub:
end
* call the supply factory script to supply resources to the factory
START  = null -> call script plugin.LI.FDN.Supply.Factory : factory=$factory  flag=null
* -----------------------------------------------------------------------------------
else
* if productuion time left is less than 45 seconds call plugin.LI.FDN.Supply.Factory
if $check.time < 45
* debug
if $al.Settings[7]
$txt.debug = ' Prdouction near completion - Supply Resource called'
gosub Debug.Sub:
end
* call the supply factory script to supply resources to the factory
START  = null -> call script plugin.LI.FDN.Supply.Factory : factory=$factory  flag=null
* -----------------------------------------------------------------------------------
end
end
end

else
* if factory does not exist remove from array
remove element from array $factory.array at index $s
* debug
if $al.Settings[7]
$txt.debug = ' Clean from Factory Array'
gosub Debug.Sub:
end
end
* wait
 = wait randomly from $wait.1 to $wait.2 ms
end

* v2 - clear is.running flag
$al.Settings[12] = null
set global variable: name='al.LI.FDN.event' value=$al.Settings

return null
* -----------------------------------------------------------------------------------

* Debug Massage handling
Debug.Sub:
$d.time = = playing time
$d.time = = format time: $d.time
$txt = $d.time + ';' + $script + ';' + $txt.debug
write to log file $DebugID  append=[TRUE]  value=$txt
endsub
* -----------------------------------------------------------------------------------
return null


