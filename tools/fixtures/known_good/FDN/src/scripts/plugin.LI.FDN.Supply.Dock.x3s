#name: plugin.LI.FDN.Supply.Dock
#lang: 44
#origin_mod: FDN
#source: mods/FDN/scripts/plugin.LI.FDN.Supply.Dock.xml
* Author: Logain Abler
* -----------------------------------------------------------------------------------
* This script is called by LI.FDN.Menu.Supply.Dock.Check
* It is used to handle suppy between the factrry and DC

* Expected values:
* - dock

* Returns values:
* - N/A

* To Do - N/A

* Version: 1.0
* Date: 23/05/2012
* Tested: 23/05/2012
* -----------------------------------------------------------------------------------

* Fetch values saved in the AL Plugin global variable:
* - DC
$script = = get script name
$al.Settings = get global variable: name='al.LI.FDN.event'
if $al.Settings
$PageID = $al.Settings[1]
$DebugID = 0 + $PageID
$dc = $al.Settings[2]
else
return null
end
* -----------------------------------------------------------------------------------

* this loops the wares at the DC for sale
if $flag == 1
if $dc  ->  exists
$ware.array = $dock  ->  get tradeable ware array from station
$s = size of array $ware.array
while $s > 0
dec $s =
$ware = $ware.array[$s]
* this calls the sell sub
gosub Sell.Ware.Sub:
* -----------------------------------------------------------------------------------

 = wait randomly from 500 to 1000 ms
end
return null
end
end
* -----------------------------------------------------------------------------------

* this loops the wares at the dock for supply from the DC and for sale
if not $flag
if not $dock == $dc
$ware.array = $dock  ->  get tradeable ware array from station
$s = size of array $ware.array
while $s > 0
dec $s =
$ware = $ware.array[$s]

* check that the ware transport class is not station
$transport.class = = get transport class of ware $ware
* -----------------------------------------------------------------------------------

if not $transport.class == ST
* this calls the sell sub
gosub Sell.Ware.Sub:
* -----------------------------------------------------------------------------------

* calculate the stock levels
$pointer = = sprintf: pageid=$PageID textid=4000, $ware, null, null, null, null
$ware.settings = $dock  ->  get local variable: name=$pointer
$virtual.stock = $ware.settings[0]
$physical.stock = $dock  ->  get amount of ware $ware in cargo bay
$stock = $virtual.stock + $physical.stock
* -----------------------------------------------------------------------------------

* get maintain amount
$maintain.level = $ware.settings[2]
if not $maintain.level > 0
$maintain.level = 0
end
* calculate required
$required.at.dock = $maintain.level - $stock
if not $required.at.dock > 0
if $ware.settings[7]
$surplus = $stock - $maintain.level
if $surplus > 0
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$surplus  station=$dc  action='add'
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$surplus  station=$dock  action='remove'
end
end
end
* -----------------------------------------------------------------------------------

* if required greater than 0
if $required.at.dock > 0

$dc.ware.settings = $dc  ->  get local variable: name=$pointer
if not $dc.ware.settings
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=null  station=$dc  action='create'
$dc.ware.settings = $dc  ->  get local variable: name=$pointer
end

* calculate dc stock
$dc.virtual.stock = $dc.ware.settings[0]
$dc.physical.stock = $dc  ->  get amount of ware $ware in cargo bay
$dc.stock = $dc.virtual.stock + $dc.physical.stock
* -----------------------------------------------------------------------------------

* get remote access level at dc
$dc.remote.level = $dc.ware.settings[1]
* -----------------------------------------------------------------------------------

* if dc remote access in on, greater than 0
if $dc.remote.level > 0
* available is the stock - remote access level
$dc.avialable = $dc.stock - $dc.remote.level
* if avialable is greater tha 0
if $dc.avialable > 0
* if the available is less than what is requested set requested to available
if $dc.avialable < $required.at.dock
$required.at.dock = $dc.avialable
end

* call the script to add the wares to the dock
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$required.at.dock  station=$dock  action='add'
* -----------------------------------------------------------------------------------

* call the script to removes the wares from the dc
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$required.at.dock  station=$dc  action='remove'
* -----------------------------------------------------------------------------------
end
end
end

end
end
 = wait randomly from 500 to 1000 ms
end
end
return null
* -----------------------------------------------------------------------------------

* sell ware Sub, checks if the ware can be sold and if so call the sell ware script
Sell.Ware.Sub:
$pointer = = sprintf: pageid=$PageID textid=4000, $ware, null, null, null, null
$ware.settings = $dock  ->  get local variable: name=$pointer
$sell = $ware.settings[5]
if $sell >= 0
$virtual.stock = $ware.settings[0]
$physical.stock = $dock  ->  get amount of ware $ware in cargo bay
$stock = $virtual.stock + $physical.stock
if $stock > $sell
$amount = $stock - $sell
START  = null -> call script plugin.LI.FDN.Sell.Ware : dock=$dock  ware=$ware  amount=$amount
end
end
endsub
* -----------------------------------------------------------------------------------

* Debug Massage handling
Debug.Sub:
$d.time = = playing time
$d.time = = format time: $d.time
$txt = $d.time + ';' + $script + ';' + $dock + ';' + $txt.debug
write to log file $DebugID  append=[TRUE]  value=$txt
endsub
* -----------------------------------------------------------------------------------
return null



