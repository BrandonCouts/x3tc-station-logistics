#name: plugin.LI.FDN.Supply.Factory
#lang: 44
#origin_mod: FDN
#source: mods/FDN/scripts/plugin.LI.FDN.Supply.Factory.xml
* Author: Logain Abler
* -----------------------------------------------------------------------------------
* This script is called by LI.FDN.Supply.Factory.Check
* It is used to handle supply between the factrry and DC

* Expected values:
* - Factory
* - Flag - 1 for Product 2 for Resources

* Returns values:
* - N/A

* To Do - N/A

* Version: 1.0
* Date: 22/05/2012
* Tested: 22/05/2012
* -----------------------------------------------------------------------------------

* Fetch values saved in the AL Plugin global variable:
* - DC
$script = = get script name
$al.Settings = get global variable: name='al.LI.FDN.event'
if $al.Settings
$PageID = $al.Settings[1]
$DebugID = 0 + $PageID
$dc = $al.Settings[2]
else
return null
end
* -----------------------------------------------------------------------------------

* flag 1 is for products
if $flag == 1
$ware = $factory  ->  get product ware
gosub Add.Product.Sub:
return null

else
$ware.array = $factory  ->  get tradeable ware array from station
$s = size of array $ware.array
while $s > 0
dec $s =
$ware = $ware.array[$s]
if $factory  ->  uses ware $ware as primary resource
gosub Supply.Resource.Sub:
end
end
end
return null
* -----------------------------------------------------------------------------------

Add.Product.Sub:
* This sub is called to pass products to the DC
* For resources the wares will be added to the DC in the following order:
* - Physical Storage
* - Virtual Storage

* Get the product amount to be passed to the DC
$product.amount = $factory  ->  get amount of ware $ware in cargo bay
* debug
if $al.Settings[7]
$txt.debug = $factory + ' has ' + $product.amount + ' of ' + $ware + ' to pass to DC'
gosub Debug.Sub:
end
* add to dc
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$product.amount  station=$dc  action='add'
* -----------------------------------------------------------------------------------

* Remove ware from factory
$remove = - $product.amount
 = $factory  ->  add $remove units of $ware
* debug
if $al.Settings[7]
$txt.debug = 'Remove ' + $product.amount + '  of ' + $ware + ' from ' + $factory
gosub Debug.Sub:
end
endsub
* -----------------------------------------------------------------------------------

Supply.Resource.Sub:
* This sub is called to pass resources to the factory
* For resources the wares will be removed from the DC in the following order:
* - Virtual Storage
* - Physical Storage
* - Buy if not in storage

* calculate what th factory needs
$required = = $factory  ->  get number of resources per cycle for ware $ware
$current = $factory  ->  get amount of ware $ware in cargo bay
$required = ( $required * 3 ) - $current
$max = $factory  ->  get max amount of ware $ware that can be stored in cargo bay
if $max < $required
$required = $max
end
* -----------------------------------------------------------------------------------

* debug
if $al.Settings[7]
$txt.debug = $factory + ' requires ' + $required + '  of ' + $ware
gosub Debug.Sub:
end

* if statement to ensure no negative values
if $required > 0
* remove the required from the DC and return what the DC was able to supply
$from.dc = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$required  station=$dc  action='remove'
* -----------------------------------------------------------------------------------


* check if the DC was able to supply the full amount if not call the buy script
if $from.dc == $required
 = $factory  ->  add $required units of $ware
else
if $from.dc > 0
 = $factory  ->  add $from.dc units of $ware
end
* calculate what needs to be bought
$required.buy = $required - $from.dc

* debug
if $al.Settings[7]
$txt.debug = 'Buy ' + $required.buy + ' of ware ' + $ware + ' for ' + $factory
gosub Debug.Sub:
end

* call the buy script
$pointer = = sprintf: pageid=$PageID textid=4000, $ware, null, null, null, null
$ware.settings = $dc  ->  get local variable: name=$pointer
* if can buy
if $ware.settings[3]
START  = null -> call script plugin.LI.FDN.Buy.Ware : factory=$factory  ware=$ware  amount=$required.buy
end

end
end
endsub
* -----------------------------------------------------------------------------------

* Debug Massage handling
Debug.Sub:
$d.time = = playing time
$d.time = = format time: $d.time
$txt = $d.time + ';' + $script + ';' + $txt.debug
write to log file $DebugID  append=[TRUE]  value=$txt
endsub
* -----------------------------------------------------------------------------------
return null



