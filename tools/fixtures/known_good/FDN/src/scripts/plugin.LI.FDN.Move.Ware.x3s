#name: plugin.LI.FDN.Move.Ware
#lang: 44
#origin_mod: FDN
#source: mods/FDN/scripts/plugin.LI.FDN.Move.Ware.xml
* Author: Logain Abler
* -----------------------------------------------------------------------------------
* this script handles the user inputs for moving wares

* Expected values:
* - ware
* - source

* Returns values:
* - N/A

* Version: 1.0
* Date: 09/06/2012
* Tested: 09/06/2012
* -----------------------------------------------------------------------------------

* Fetch values saved in the AL Plugin global variable:
$script = = get script name
$al.Settings = get global variable: name='al.LI.FDN.event'
if $al.Settings
$PageID = $al.Settings[1]
$DebugID = 0 + $PageID
else
return null
end
* -----------------------------------------------------------------------------------

* fetch ware details from the source
$pointer = = sprintf: pageid=$PageID textid=4000, $ware, null, null, null, null
$ware.array = $source  ->  get local variable: name=$pointer
* calculate the avialable physical, virtual and total
$virtual.avialable = $ware.array[0]
if not $virtual.avialable > 0
$virtual.avialable = 0
end
$physical.avialable = $source  ->  get amount of ware $ware in cargo bay
$stock.avialable = $virtual.avialable + $physical.avialable
* -----------------------------------------------------------------------------------

if not $stock.avialable > 0
* Debug
if $al.Settings[7]
$txt.debug = $source + ' has no free ' + $ware + ' - exit move ware'
gosub Debug.Sub:
end
return null
end
* -----------------------------------------------------------------------------------

* USER SELECT - player owned ship or station
$txt = = read text: page=$PageID id=184
$destination = null  ->  get user input: type=Var/Ship/Station owned by Player, title=$txt
* Debug
if $al.Settings[7]
$txt.debug = 'Selected: ' + $destination
gosub Debug.Sub:
end
* -----------------------------------------------------------------------------------

* check that destination can accept ware
if not $destination  ->  is of class Dock 2007
if not $destination  ->  get free amount of ware $ware in cargo bay
$txt = = sprintf: pageid=$PageID textid=194, $destination, $ware, null, null, null
display subtitle text: text=$txt duration=2000 ms
return null
end
end
* -----------------------------------------------------------------------------------

* catch if source and destination is the same and exit
if $destination == $source
* Debug
if $al.Settings[7]
$txt.debug = 'Selected: ' + $destination + ' is same as source - exit move ware'
gosub Debug.Sub:
end
$txt = = sprintf: pageid=$PageID textid=192, $destination, null, null, null, null
display subtitle text: text=$txt duration=2000 ms
return null
end
* -----------------------------------------------------------------------------------

* USER INPUT - amount of ware to move
$txt = = read text: page=$PageID id=178
$amount = null  ->  get user input: type=Var/Number, title=$txt
if not is datatyp[ $amount ] == DATATYPE_NULL
if not $amount > 0
* if not a valid amount exit
return null
end
if $amount > $stock.avialable
* if amount greater than current stock
$amount = $stock.avialable
end
else
$txt = = sprintf: pageid=$PageID textid=193, $amount, $ware, null, null, null
display subtitle text: text=$txt duration=2000 ms
return null
end
* Debug
if $al.Settings[7]
$txt.debug = 'Input : ' + $amount + ' of ' + $ware + ' to be moved'
gosub Debug.Sub:
end
* -----------------------------------------------------------------------------------

* checks if the destination can hold the ware
if not $destination  ->  is of class Dock 2007
if $destination  ->  get free amount of ware $ware in cargo bay

* add to destination
$amount.added = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$amount  station=$destination  action='add'
* -----------------------------------------------------------------------------------

if $amount.added > 0
if $amount.added < $amount
$amount = $amount.added
end

* remove from source
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$amount  station=$source  action='remove'
* -----------------------------------------------------------------------------------
end
end
else

* add to destination
$amount.added = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$amount  station=$destination  action='add'
* -----------------------------------------------------------------------------------

if $amount.added > 0
if $amount.added < $amount
$amount = $amount.added
end

* remove from source
 = null -> call script plugin.LI.FDN.Update.Ware : ware=$ware  amount=$amount  station=$source  action='remove'
* -----------------------------------------------------------------------------------
end
end
return null
* -----------------------------------------------------------------------------------

* Debug Massage handling
Debug.Sub:
$d.time = = playing time
$d.time = = format time: $d.time
$txt = $d.time + ';' + $script + ';' + $txt.debug
write to log file $DebugID  append=[TRUE]  value=$txt
endsub
* -----------------------------------------------------------------------------------
return null


