#name: glen.trade.ok.config
#lang: 44
#origin_mod: OKTraders1_7_1
#source: mods/OKTraders1_7_1/scripts/glen.trade.ok.config.xml

			* ******************************************************************************
			* OK Trade
			*  Config related functions
			* ******************************************************************************

			$Comp = 'Config'

			$Config = get global variable: name='glen.trade.ok'
			skip if $Config
			return null

			$Config.Ver.Internal = 3
			$Config.Debug.Enabled = 5

			$Lib.Config.Get.Station.Config = 0
			$Lib.Config.Get.Stock.Limit.Min = 1
			$Lib.Config.Get.Stock.Limit.Max = 2
			$Lib.Config.Get.Stock.Limit.Free = 3
			$Lib.Config.Get.Stock.Limit.Tradeable = 4
			$Lib.Config.Get.Dockware.Limit = 5

			$Lib.Generic.Get.Minimum = 1

			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=10 fmt='>>> Func=%s, arg1=%s, arg2=%s, arg3=%s, arg4=%s' arg1=$Func arg2=$Arg1 arg3=$Arg2 arg4=$Arg3 arg5=$Arg4

			$rc = null

			* ******************************************************************************
			* Options
			* ******************************************************************************
			if $Func == $Lib.Config.Get.Station.Config
			gosub Lib.Config.Get.Station.Config:
			else if $Func == $Lib.Config.Get.Stock.Limit.Min
			gosub Lib.Config.Get.Stock.Limit.Min:
			else if $Func == $Lib.Config.Get.Stock.Limit.Max
			gosub Lib.Config.Get.Stock.Limit.Max:
			else if $Func == $Lib.Config.Get.Stock.Limit.Free
			gosub Lib.Config.Get.Stock.Limit.Free:
			else if $Func == $Lib.Config.Get.Stock.Limit.Tradeable
			gosub Lib.Config.Get.Stock.Limit.Tradeable:
			else if $Func == $Lib.Config.Get.Dockware.Limit
			gosub Lib.Config.Get.Dockware.Limit:
			else
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=0 fmt='Unknown function %s' arg1=$Func arg2=null arg3=null arg4=null arg5=null
			end

			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=10 fmt='<<< Func=%s, arg1=%s, arg2=%s, arg3=%s, rc=%s' arg1=$Func arg2=$Arg1 arg3=$Arg2 arg4=$Arg3 arg5=$rc

			return $rc

			* ******************************************************************************
			* Lib.Config.Get.Station.Config
			*  Get the station config
			* ******************************************************************************
			Lib.Config.Get.Station.Config:
			$Station = $Arg1

			if not $Station-> is of class [Station]
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=0 fmt='Lib.Config.Get.Station.Config: Bad input Station=%s' arg1=$Station arg2=null arg3=null arg4=null arg5=null
			endsub
			end

			$rc = $Station-> get local variable: name='glen.trade.ok.limits'
			if not $rc
			$rc = array alloc: size=5
			$rc[0] = $Config[$Config.Ver.Internal]
			$Tmp = array alloc: size=0
			$rc[1] = $Tmp
			$Tmp = array alloc: size=0
			$rc[2] = $Tmp
			$Tmp = array alloc: size=0
			$rc[3] = $Tmp
			$Station-> set local variable: name='glen.trade.ok.limits' value=$rc
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=8 fmt='Lib.Config.Get.Station.Config: Created config for station %s' arg1=$Station arg2=null arg3=null arg4=null arg5=null
			end

			$Ver = $rc[0]
			$Wares = $rc[1]
			$Mins = $rc[2]
			$Maxes = $rc[3]

			* Clear any 1.7.0 config that got out of step
			if $Ver < 1007001
			$Wares.Count = size of array $Wares
			$Mins.Count = size of array $Mins
			$Maxes.Count = size of array $Maxes
			if $Wares.Count != $Mins.Count OR $Mins.Count != $Maxes.Count
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=1 fmt='Lib.Config.Get.Station.Config: Clearing corrupt station ware config for %s' arg1=$Station arg2=null arg3=null arg4=null arg5=null
			resize array $Wares to 0
			resize array $Mins to 0
			resize array $Maxes to 0
			end
			$rc[0] = $Config[$Config.Ver.Internal]
			end

			$Sort = 0

			* Add wares not already known
			$Wares.Station = $Station-> get tradeable ware array from station

			$idx = size of array $Wares.Station
			while $idx
			dec $idx
			$Ware = $Wares.Station[$idx]

			if not find $Ware in array: $Wares
			append $Ware to array $Wares
			append 0 to array $Mins
			append 100 to array $Maxes
			$Sort = 1
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=8 fmt='Lib.Config.Get.Station.Config: Added entry for ware %s station %s' arg1=$Ware arg2=$Station arg3=null arg4=null arg5=null
			end
			end

			* Remove wares no longer present
			$idx = size of array $Wares
			while $idx
			dec $idx
			$Ware = $Wares[$idx]

			if not find $Ware in array: $Wares.Station
			remove element from array $Wares at index $idx
			remove element from array $Mins at index $idx
			remove element from array $Maxes at index $idx
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=8 fmt='Lib.Config.Get.Station.Config: Removed entry for ware %s station %s' arg1=$Ware arg2=$Station arg3=null arg4=null arg5=null
			end
			end

			* Sort alphabetically if wares were added
			if $Sort
			$Wares = sort array: data=$Wares sort values=$Wares
			$Mins = sort array: data=$Mins sort values=$Wares
			$Maxes = sort array: data=$Maxes sort values=$Wares
			end

			endsub

			* ******************************************************************************
			* Lib.Config.Get.Stock.Limit.Common
			*  Common body for Lib.Config.Get.Stock.Limit.*
			* ******************************************************************************
			Lib.Config.Get.Stock.Limit.Common:
			$Station = $Arg1
			$Ware = $Arg2

			$Range = $Station-> get max amount of ware $Ware that can be stored in cargo bay

			$Owner = $Station-> get owner race
			if $Owner != [Player]
			$Min = 0
			$Max = $Range
			endsub
			end

			$Station.Config = [THIS]-> call script glen.trade.ok.config : Func=$Lib.Config.Get.Station.Config Arg1=$Station Arg2=null Arg3=null Arg4=null Arg5=null

			$Wares = $Station.Config[1]
			$Mins = $Station.Config[2]
			$Maxes = $Station.Config[3]

			$idx = get index of $Ware in array $Wares offset=-1

			if $idx < 0
			$Min = 0
			$Max = $Range
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=9 fmt='Lib.Config.Get.Stock.Limit.Common: Ware not found in station config: Ware=%s, Station=%s, Wares=%s, Mins=%s, Maxes=%s' arg1=$Ware arg2=$Station arg3=$Wares arg4=$Mins arg5=$Maxes
			else
			$Min = $Mins[$idx]
			$Max = $Maxes[$idx]
			end

			endsub

			* ******************************************************************************
			* Lib.Config.Get.Stock.Limit.Min
			*  Get the minimum stock limit for a station as absolute value
			* ******************************************************************************
			Lib.Config.Get.Stock.Limit.Min:
			gosub Lib.Config.Get.Stock.Limit.Common:
			$rc = ($Range * $Min) / 100
			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=10 fmt='Lib.Config.Get.Stock.Limit.Min: Ware=%s, Station=%s, Min.Perc=%s, Range=%s, rc=%s' arg1=$Ware arg2=$Station arg3=$Min arg4=$Range arg5=$rc
			endsub

			* ******************************************************************************
			* Lib.Config.Get.Stock.Limit.Max
			*  Get the maximum stock limit for a station as absolute value
			* ******************************************************************************
			Lib.Config.Get.Stock.Limit.Max:
			gosub Lib.Config.Get.Stock.Limit.Common:

			if $Owner == [Player]
			$OK.Limit = ($Range * $Max) / 100
			$Dockware.Limit = [THIS]-> call script glen.trade.ok.config : Func=$Lib.Config.Get.Dockware.Limit Arg1=$Station Arg2=$Ware Arg3=null Arg4=null Arg5=null
			$rc = $OK.Limit
			skip if $Dockware.Limit == null
			$rc = [THIS]-> call script glen.trade.ok.lib.generic : Func=$Lib.Generic.Get.Minimum Arg1=$OK.Limit Arg2=$Dockware.Limit Arg3=null Arg4=null Arg5=null
			else
			$rc = $Max
			end

			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=10 fmt='Lib.Config.Get.Stock.Limit.Max: Ware=%s, Station=%s, Max.OK=%s, Max.Dockware=%s, rc=%s' arg1=$Ware arg2=$Station arg3=$OK.Limit arg4=$Dockware.Limit arg5=$rc
			endsub


			* ******************************************************************************
			* Lib.Config.Get.Stock.Limit.Free
			*  Get free amount of a ware for a station respecting limits
			* ******************************************************************************
			Lib.Config.Get.Stock.Limit.Free:
			gosub Lib.Config.Get.Stock.Limit.Max:
			$Have = $Station-> get amount of ware $Ware in cargo bay
			$rc = $rc - $Have
			skip if $rc >= 0
			$rc = 0

			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=10 fmt='Lib.Config.Get.Stock.Limit.Free: Ware=%s, Station=%s, Have=%s, rc=%s' arg1=$Ware arg2=$Station arg3=$Have arg4=$rc arg5=null
			endsub

			* ******************************************************************************
			* Lib.Config.Get.Stock.Limit.Tradeable
			*  Get the amount of ware available at a station minus the reserved minumum
			* ******************************************************************************
			Lib.Config.Get.Stock.Limit.Tradeable:
			gosub Lib.Config.Get.Stock.Limit.Min:
			$Have = $Station-> get true amount of ware $Ware in cargo bay
			$rc = $Have - $rc
			skip if $rc >= 0
			$rc = 0

			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=10 fmt='Lib.Config.Get.Stock.Limit.Tradeable: Ware=%s, Station=%s, $Have=%s, rc=%s' arg1=$Ware arg2=$Station arg3=$Have arg4=$rc arg5=null
			endsub

			* ******************************************************************************
			* Lib.Config.Get.Dockware.Limit
			*  Get dockware manager limit on a ware. Returns null if no limit is set.
			* ******************************************************************************
			Lib.Config.Get.Dockware.Limit:
			$Station = $Arg1
			$Ware = $Arg2

			$Maintype = get maintype of ware $Ware
			$SubType = get subtype of ware $Ware
			$Variable = 'dockware.manager.cargo.' + ($Maintype * 100 + $SubType)
			$rc = $Station-> get local variable: name=$Variable

			skip if not $Config[$Config.Debug.Enabled]
			= [THIS]-> call script glen.trade.ok.trace : comp=$Comp lvl=10 fmt='Lib.Config.Get.Dockware.Limit: Ware=%s, Station=%s, rc=%s' arg1=$Ware arg2=$Station arg3=$rc arg4=null arg5=null
			endsub

			return null
