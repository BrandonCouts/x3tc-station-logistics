#name: glen.trade.ok.state
#lang: 44
#origin_mod: OKTraders1_7_1
#source: mods/OKTraders1_7_1/scripts/glen.trade.ok.state.xml


			* ******************************************************************************

			* OK Trade

			*  Trader state

			* ******************************************************************************


			$Comp
			 
			=
			 
			'State'


			$Config
			 
			=
			 
			get
			 
			global
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'

			skip
			 
			if
			 
			$Config

			return
			 
			null


			$Lib.Get.Reserve.Jump.Energy
			 
			=
			 
			2

			$Lib.Get.Non.Transportable.Wares
			 
			=
			 
			9

			$Lib.Get.Reserved.Amount
			 
			=
			 
			30


			$Lib.Generic.Get.Minimum
			 
			=
			 
			1

			$Lib.Generic.Join.Arrays
			 
			=
			 
			2

			$Lib.Generic.Clone.Array
			 
			=
			 
			3

			$Lib.Generic.Get.Jump.Energy.For.Trip
			 
			=
			 
			4


			$Lib.State.Fetch
			 
			=
			 
			0

			$Lib.State.Publish
			 
			=
			 
			1

			$Lib.State.Reset.Config
			 
			=
			 
			2

			$Lib.State.Update.Config
			 
			=
			 
			3

			$Lib.State.Get.Excludes
			 
			=
			 
			4

			$Lib.State.Check.Competition
			 
			=
			 
			5


			$Internal.Trade.Cache.Add
			 
			=
			 
			20

			$Internal.Trade.Cache.Remove
			 
			=
			 
			21


			* Global config

			$Config.Ver.Internal
			 
			=
			 
			3

			$Config.PageId
			 
			=
			 
			4

			$Config.Debug.Enabled
			 
			=
			 
			5

			$Config.Auto.Rename
			 
			=
			 
			9

			$Config.Blacklist
			 
			=
			 
			10

			$Config.Trade.Cache
			 
			=
			 
			19


			* Trader mission state

			$Mission.Type.None
			 
			=
			 
			0

			$Mission.Type.Buy
			 
			=
			 
			1

			$Mission.Type.Sell
			 
			=
			 
			2

			$Mission.Type.Move.Station
			 
			=
			 
			3


			* State contents

			$State.Version
			 
			=
			 
			0

			$State.Mission
			 
			=
			 
			1

			$State.Dest
			 
			=
			 
			2

			$State.Ware
			 
			=
			 
			3

			$State.Price
			 
			=
			 
			4

			$State.Ware.Entries
			 
			=
			 
			5

			$State.Fleeing
			 
			=
			 
			6

			$State.Balance
			 
			=
			 
			7

			$State.Trade.Mode
			 
			=
			 
			8

			$State.Tether.Sector
			 
			=
			 
			9

			$State.Tether.Range
			 
			=
			 
			10

			$State.Ver.Cmd
			 
			=
			 
			11

			$State.Ver.Monitor
			 
			=
			 
			12

			$State.Last.Mission
			 
			=
			 
			13

			$State.Last.Dest
			 
			=
			 
			14

			$State.Last.Ware
			 
			=
			 
			15

			$State.Dest2
			 
			=
			 
			16

			$State.Reserve.Fuel
			 
			=
			 
			17


			$Trade.Mode.Normal
			 
			=
			 
			0

			$Trade.Mode.Economy
			 
			=
			 
			1

			$Trade.Mode.Player
			 
			=
			 
			2


			$State
			 
			=
			 
			[THIS]
			->
			 
			get
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Func=%s, arg1=%s, arg2=%s, arg3=%s, arg4=%s'
			 
			arg1
			=
			$Func
			 
			arg2
			=
			$Arg1
			 
			arg3
			=
			$Arg2
			 
			arg4
			=
			$Arg3
			 
			arg5
			=
			$Arg4


			$rc
			 
			=
			 
			null


			* ******************************************************************************

			* Options

			* ******************************************************************************

			if
			 
			$Func
			 
			==
			 
			$Lib.State.Fetch

			gosub
			 
			Lib.State.Fetch
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			$Lib.State.Get.Excludes

			gosub
			 
			Lib.State.Get.Excludes
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			$Lib.State.Publish

			gosub
			 
			Lib.State.Publish
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			$Lib.State.Reset.Config

			gosub
			 
			Lib.State.Reset.Config
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			$Lib.State.Update.Config

			gosub
			 
			Lib.State.Update.Config
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			$Lib.State.Check.Competition

			gosub
			 
			Lib.State.Check.Competition
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			$Internal.Trade.Cache.Add

			gosub
			 
			Internal.Trade.Cache.Add
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			$Internal.Trade.Cache.Remove

			gosub
			 
			Internal.Trade.Cache.Remove
			:

			else

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			0
			 
			fmt
			=
			'Unknown function %s'
			 
			arg1
			=
			$Func
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			end


			return
			 
			$rc


			* ******************************************************************************

			* Lib.State.Fetch:

			*  Create, upgrade, and return trader state

			* ******************************************************************************

			Lib.State.Fetch
			:

			while
			 
			1


			if
			 
			not
			 
			$State

			gosub
			 
			Internal.State.Create
			:

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Lib.State.Fetch: Created trader state data'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end


			$Ver.State
			 
			=
			 
			$State
			[
			$State.Version
			]

			$Ver.Config
			 
			=
			 
			$Config
			[
			$Config.Ver.Internal
			]

			if
			 
			$Ver.Config
			 
			>
			 
			$Ver.State

			gosub
			 
			Internal.State.Upgrade
			:

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Lib.State.Fetch: Upgraded trader state data from %s to %s'
			 
			arg1
			=
			$Ver.State
			 
			arg2
			=
			$Ver.Config
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end


			if
			 
			$Ver.Config
			 
			<
			 
			$Ver.State

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			4
			 
			fmt
			=
			'Lib.State.Fetch: Trader state data version %s is higher than installed version %s'
			 
			arg1
			=
			$Ver.State
			 
			arg2
			=
			$Ver.Config
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			end


			break

			end


			$rc
			 
			=
			 
			$State

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Lib.State.Fetch: rc=%s'
			 
			arg1
			=
			$rc
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			endsub


			* ******************************************************************************

			* Lib.State.Publish:

			*  Advertise current command/mission state

			* ******************************************************************************

			Lib.State.Publish
			:

			$Mission
			 
			=
			 
			$Arg1

			$Dest
			 
			=
			 
			$Arg2

			$Ware
			 
			=
			 
			$Arg3

			$Price
			 
			=
			 
			$Arg4

			$Dest2
			 
			=
			 
			$Arg5


			$Old.Mission
			 
			=
			 
			$State
			[
			$State.Mission
			]

			$Old.Dest
			 
			=
			 
			$State
			[
			$State.Dest
			]

			$Old.Ware
			 
			=
			 
			$State
			[
			$State.Ware
			]

			$Old.Dest2
			 
			=
			 
			$State
			[
			$State.Dest2
			]


			$State
			[
			$State.Mission
			]
			 
			=
			 
			$Mission

			$State
			[
			$State.Dest
			]
			 
			=
			 
			$Dest

			$State
			[
			$State.Ware
			]
			 
			=
			 
			$Ware

			$State
			[
			$State.Price
			]
			 
			=
			 
			$Price

			$State
			[
			$State.Dest2
			]
			 
			=
			 
			$Dest2

			$State
			[
			$State.Last.Mission
			]
			 
			=
			 
			$Old.Mission

			$State
			[
			$State.Last.Dest
			]
			 
			=
			 
			$Old.Dest

			$State
			[
			$State.Last.Ware
			]
			 
			=
			 
			$Old.Ware


			* Update lookup table

			if
			 
			(
			$Mission
			 
			!=
			 
			$Old.Mission
			 
			OR
			 
			$Dest
			 
			!=
			 
			$Old.Dest
			 
			OR
			 
			$Ware
			 
			!=
			 
			$Old.Ware
			 
			OR
			 
			$Dest2
			 
			!=
			 
			$Old.Dest2
			)

			gosub
			 
			Auto.Rename
			:


			* Clear previous lookup state

			if
			 
			(
			$Old.Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			OR
			 
			$Old.Mission
			 
			==
			 
			$Mission.Type.Sell
			)

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Internal.Trade.Cache.Remove
			 
			Arg1
			=
			$Old.Mission
			 
			Arg2
			=
			$Old.Dest
			 
			Arg3
			=
			$Old.Ware
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			if
			 
			(
			$Old.Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			AND
			 
			$Old.Dest2
			)

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Internal.Trade.Cache.Remove
			 
			Arg1
			=
			$Mission.Type.Sell
			 
			Arg2
			=
			$Old.Dest2
			 
			Arg3
			=
			$Old.Ware
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			end

			end


			* Add new lookup state

			if
			 
			(
			$Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			OR
			 
			$Mission
			 
			==
			 
			$Mission.Type.Sell
			)

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Internal.Trade.Cache.Add
			 
			Arg1
			=
			$Mission
			 
			Arg2
			=
			$Dest
			 
			Arg3
			=
			$Ware
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			if
			 
			(
			$Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			AND
			 
			$Dest2
			)

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Internal.Trade.Cache.Add
			 
			Arg1
			=
			$Mission.Type.Sell
			 
			Arg2
			=
			$Dest2
			 
			Arg3
			=
			$Ware
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			end

			end

			end



			if
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			if
			 
			$Mission
			 
			==
			 
			$Mission.Type.Buy

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Cmd=Buy, Dest=%s, Dest2=%s, Ware=%s, Price=%s, Environment=%s'
			 
			arg1
			=
			$Dest
			 
			arg2
			=
			$Dest2
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Price
			 
			arg5
			=
			[ENVIRONMENT]

			else
			 
			if
			 
			$Mission
			 
			==
			 
			$Mission.Type.Sell

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Cmd=Sell, Dest=%s, Ware=%s, Price=%s, Environment=%s'
			 
			arg1
			=
			$Dest
			 
			arg2
			=
			$Ware
			 
			arg3
			=
			$Price
			 
			arg4
			=
			[ENVIRONMENT]
			 
			arg5
			=
			null

			else
			 
			if
			 
			$Mission
			 
			==
			 
			$Mission.Type.Move.Station

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Cmd=Move to station, Dest=%s, Environment=%s'
			 
			arg1
			=
			$Dest
			 
			arg2
			=
			[ENVIRONMENT]
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			else
			 
			if
			 
			$Mission
			 
			==
			 
			$Mission.Type.None

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			7
			 
			fmt
			=
			'Cmd=None, Environment=%s'
			 
			arg1
			=
			[ENVIRONMENT]
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			else

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Cmd=%s, Dest=%s, Ware=%s, Price=%s, Environment=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Dest
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Price
			 
			arg5
			=
			[ENVIRONMENT]

			end

			end


			* Update jump fuel reserve

			* = [THIS]-> call script 'glen.trade.ok.lib' : Func=$Lib.Get.Reserve.Jump.Energy Arg1=$Dest Arg2=null Arg3=null Arg4=null Arg5=null Arg6=null


			endsub


			* ******************************************************************************

			* Lib.State.Reset.Config:

			*  Reset trader config to defaults

			* ******************************************************************************

			Lib.State.Reset.Config
			:

			if
			 
			[HOMEBASE]

			if
			 
			[HOMEBASE]
			->
			 
			is
			 
			of
			 
			type
			 
			[Station]

			$Ware.Entries
			 
			=
			 
			$State
			[
			$State.Ware.Entries
			]

			skip
			 
			if
			 
			$Ware.Entries

			$Ware.Entries
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			gosub
			 
			Internal.Set.Default.Wares
			:

			gosub
			 
			Internal.Sort.Ware.Entries
			:

			end

			end

			$State
			[
			$State.Trade.Mode
			]
			 
			=
			 
			$Trade.Mode.Normal

			$State
			[
			$State.Tether.Sector
			]
			 
			=
			 
			null

			$State
			[
			$State.Tether.Range
			]
			 
			=
			 
			0

			endsub


			* ******************************************************************************

			* Lib.State.Update.Config:

			*  Update ware entries to reflect changes to homebase ware list

			* ******************************************************************************

			Lib.State.Update.Config
			:

			if
			 
			[HOMEBASE]

			if
			 
			[HOMEBASE]
			->
			 
			is
			 
			of
			 
			type
			 
			[Station]

			$Ware.Entries
			 
			=
			 
			$State
			[
			$State.Ware.Entries
			]

			skip
			 
			if
			 
			$Ware.Entries

			$Ware.Entries
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Updated
			 
			=
			 
			0

			gosub
			 
			Internal.Update.Wares
			:

			skip
			 
			if
			 
			not
			 
			$Updated

			gosub
			 
			Internal.Sort.Ware.Entries
			:

			end

			end

			endsub


			* ******************************************************************************

			* Lib.State.Get.Excludes:

			*  Get sector exclude array

			*   Cache

			*   [0] - Version

			*   [1] - Origin Sector

			*   [2] - Keys array, jump ranges

			*   [3] - Values array, where value [0] Timestamp

			*                                   [1] Exclude sectors

			* ******************************************************************************

			Lib.State.Get.Excludes
			:

			$Blacklist
			 
			=
			 
			$Config
			[
			$Config.Blacklist
			]

			$Ver.Config
			 
			=
			 
			$Config
			[
			$Config.Ver.Internal
			]

			$Ver.Engine
			 
			=
			 
			script
			 
			engine
			 
			version

			$Is.AP
			 
			=
			 
			(
			$Ver.Engine
			 
			>
			 
			49
			)


			* Determine if tethered and search for a cache

			if
			 
			[HOMEBASE]

			$Tether.Sector
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			sector

			$Tether.Range
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			max
			 
			trade
			 
			jumps

			$Cache
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok.excludes'

			else

			$Tether.Sector
			 
			=
			 
			$State
			[
			$State.Tether.Sector
			]

			if
			 
			$Tether.Sector

			$Tether.Range
			 
			=
			 
			$State
			[
			$State.Tether.Range
			]

			if
			 
			$Is.AP

			* Local variables can be stored on sectors in AP

			$Cache
			 
			=
			 
			$Tether.Sector
			->
			 
			get
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok.excludes'

			else

			* Otherwise the cache is stored on the tethered trader in TC

			$Cache
			 
			=
			 
			[THIS]
			->
			 
			get
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok.excludes'

			end

			else

			$rc
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib.generic
			 
			:
			 
			Func
			=
			$Lib.Generic.Clone.Array
			 
			Arg1
			=
			$Blacklist
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Lib.State.Get.Excludes: Not tethered, blacklist only.'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			return
			 
			$rc

			end

			end


			* Check cache invalidation and return cached value if good

			while
			 
			1

			skip
			 
			if
			 
			$Cache

			break


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Lib.State.Get.Excludes: Found cache=%s'
			 
			arg1
			=
			$Cache
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null


			$Ver.Cache
			 
			=
			 
			$Cache
			[
			0
			]

			if
			 
			$Ver.Cache
			 
			>
			 
			$Ver.Config

			$Cache
			 
			=
			 
			null

			break

			end


			$Sector
			 
			=
			 
			$Cache
			[
			1
			]

			if
			 
			$Sector
			 
			!=
			 
			$Tether.Sector

			$Cache
			 
			=
			 
			null

			break

			end


			$Keys
			 
			=
			 
			$Cache
			[
			2
			]

			$idx
			 
			=
			 
			get
			 
			index
			 
			of
			 
			$Tether.Range
			 
			in
			 
			array
			 
			$Keys
			 
			offset
			=
			-1

			skip
			 
			if
			 
			$idx
			 
			>=
			 
			0

			break


			$Values
			 
			=
			 
			$Cache
			[
			3
			]

			$Now
			 
			=
			 
			playing
			 
			time

			$Timestamp
			 
			=
			 
			$Values
			[
			$idx
			]
			[
			0
			]

			if
			 
			(
			$Timestamp
			 
			+
			 
			30
			)
			 
			<
			 
			$Now

			remove
			 
			element
			 
			from
			 
			array
			 
			$Keys
			 
			at
			 
			index
			 
			$idx

			remove
			 
			element
			 
			from
			 
			array
			 
			$Values
			 
			at
			 
			index
			 
			$idx

			break

			end


			$Excludes
			 
			=
			 
			$Values
			[
			$idx
			]
			[
			1
			]

			$rc
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib.generic
			 
			:
			 
			Func
			=
			$Lib.Generic.Join.Arrays
			 
			Arg1
			=
			$Blacklist
			 
			Arg2
			=
			$Excludes
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Lib.State.Get.Excludes: Tethered, cache hit. Excludes=%s'
			 
			arg1
			=
			$Excludes
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			return
			 
			$rc

			end


			* Create cache if necessary

			if
			 
			not
			 
			$Cache

			$Cache
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			15

			$Cache
			[
			0
			]
			 
			=
			 
			$Ver.Config

			$Cache
			[
			1
			]
			 
			=
			 
			$Tether.Sector

			$Keys
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Values
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Cache
			[
			2
			]
			 
			=
			 
			$Keys

			$Cache
			[
			3
			]
			 
			=
			 
			$Values

			if
			 
			[HOMEBASE]

			[HOMEBASE]
			->
			 
			set
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok.excludes'
			 
			value
			=
			$Cache

			else
			 
			if
			 
			$Is.AP

			$Tether.Sector
			->
			 
			set
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok.excludes'
			 
			value
			=
			$Cache

			else

			[THIS]
			->
			 
			set
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok.excludes'
			 
			value
			=
			$Cache

			end

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Lib.State.Get.Excludes: Created cache=%s'
			 
			arg1
			=
			$Cache
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			end


			* Get all sectors outside of tether range

			$Includes
			 
			=
			 
			$Tether.Sector
			->
			 
			find
			 
			all
			 
			sectors
			 
			within
			 
			$Tether.Range
			 
			jumps
			:
			 
			Only
			 
			known
			 
			sectors
			=
			0

			$Excludes
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0


			$x
			 
			=
			 
			get
			 
			max
			 
			sectors
			 
			in
			 
			x
			 
			direction

			while
			 
			$x

			dec
			 
			$x


			$y
			 
			=
			 
			get
			 
			max
			 
			sectors
			 
			in
			 
			y
			 
			direction

			while
			 
			$y

			dec
			 
			$y

			$Sector
			 
			=
			 
			get
			 
			sector
			 
			from
			 
			universe
			 
			index
			:
			 
			x
			=
			$x
			,
			 
			y
			=
			$y

			skip
			 
			if
			 
			$Sector

			continue

			skip
			 
			if
			 
			not
			 
			find
			 
			$Sector
			 
			in
			 
			array
			:
			 
			$Blacklist

			continue

			skip
			 
			if
			 
			find
			 
			$Sector
			 
			in
			 
			array
			:
			 
			$Includes

			append
			 
			$Sector
			 
			to
			 
			array
			 
			$Excludes

			end

			end


			$Keys
			 
			=
			 
			$Cache
			[
			2
			]

			$Values
			 
			=
			 
			$Cache
			[
			3
			]

			$Now
			 
			=
			 
			playing
			 
			time

			$Value
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Now
			,
			 
			$Excludes
			,
			 
			null
			,
			 
			null
			,
			 
			null

			append
			 
			$Tether.Range
			 
			to
			 
			array
			 
			$Keys

			append
			 
			$Value
			 
			to
			 
			array
			 
			$Values


			$rc
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib.generic
			 
			:
			 
			Func
			=
			$Lib.Generic.Join.Arrays
			 
			Arg1
			=
			$Blacklist
			 
			Arg2
			=
			$Excludes
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Lib.State.Get.Excludes: Tethered, cache miss. Excludes=%s'
			 
			arg1
			=
			$Excludes
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			endsub


			* ******************************************************************************

			* Update.Wares:

			*  Take into account wares added or removed from the homebase

			* ******************************************************************************

			Internal.Update.Wares
			:

			$Wares.Homebase
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			tradeable
			 
			ware
			 
			array
			 
			from
			 
			station

			$Wares.Have
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0


			* Remove ware entries that are no longer traded by the homebase

			$Count
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Ware.Entries

			$idx
			 
			=
			 
			0

			while
			 
			$idx
			 
			<
			 
			$Count

			$Entry
			 
			=
			 
			$Ware.Entries
			[
			$idx
			]

			$Entry.Len
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Entry

			$Ware
			 
			=
			 
			$Entry
			[
			0
			]


			if
			 
			not
			 
			find
			 
			$Ware
			 
			in
			 
			array
			:
			 
			$Wares.Homebase

			remove
			 
			element
			 
			from
			 
			array
			 
			$Ware.Entries
			 
			at
			 
			index
			 
			$idx

			$Updated
			 
			=
			 
			1

			dec
			 
			$Count

			else

			inc
			 
			$idx

			append
			 
			$Ware
			 
			to
			 
			array
			 
			$Wares.Have

			end

			end


			* Add ware entries that have been added to the homebase

			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Wares.Homebase

			while
			 
			$idx

			dec
			 
			$idx

			$Ware
			 
			=
			 
			$Wares.Homebase
			[
			$idx
			]

			if
			 
			not
			 
			find
			 
			$Ware
			 
			in
			 
			array
			:
			 
			$Wares.Have

			$Ware.Entry
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ware
			,
			 
			$Mission.Type.None
			,
			 
			null
			,
			 
			null
			,
			 
			null

			append
			 
			$Ware.Entry
			 
			to
			 
			array
			 
			$Ware.Entries

			$Updated
			 
			=
			 
			1

			end

			end

			endsub


			* ******************************************************************************

			* Internal.Set.Default.Wares:

			*  Reset hombased trader ware config

			* ******************************************************************************

			Internal.Set.Default.Wares
			:

			resize
			 
			array
			 
			$Ware.Entries
			 
			to
			 
			0

			$Non.Transportable.Wares
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Non.Transportable.Wares
			 
			Arg1
			=
			[THIS]
			 
			Arg2
			=
			[HOMEBASE]
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			$Wares
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			tradeable
			 
			ware
			 
			array
			 
			from
			 
			station

			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Wares

			while
			 
			$idx

			dec
			 
			$idx

			$Ware
			 
			=
			 
			$Wares
			[
			$idx
			]


			if
			 
			find
			 
			$Ware
			 
			in
			 
			array
			:
			 
			$Non.Transportable.Wares

			$Ware.Entry
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ware
			,
			 
			$Mission.Type.None
			,
			 
			null
			,
			 
			null
			,
			 
			null

			else
			 
			if
			 
			[HOMEBASE]
			->
			 
			is
			 
			of
			 
			class
			 
			[Dock]

			$Ware.Entry
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ware
			,
			 
			$Mission.Type.None
			,
			 
			null
			,
			 
			null
			,
			 
			null

			else
			 
			if
			 
			[HOMEBASE]
			->
			 
			uses
			 
			ware
			 
			$Ware
			 
			as
			 
			secondary
			 
			resource

			$Ware.Entry
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ware
			,
			 
			$Mission.Type.None
			,
			 
			null
			,
			 
			null
			,
			 
			null

			else
			 
			if
			 
			[HOMEBASE]
			->
			 
			can
			 
			buy
			 
			ware
			 
			$Ware

			$Ware.Entry
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ware
			,
			 
			$Mission.Type.Buy
			,
			 
			null
			,
			 
			null
			,
			 
			null

			else
			 
			if
			 
			[HOMEBASE]
			->
			 
			can
			 
			sell
			 
			ware
			 
			$Ware

			$Ware.Entry
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ware
			,
			 
			$Mission.Type.Sell
			,
			 
			null
			,
			 
			null
			,
			 
			null

			else

			$Ware.Entry
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ware
			,
			 
			$Mission.Type.None
			,
			 
			null
			,
			 
			null
			,
			 
			null

			end


			append
			 
			$Ware.Entry
			 
			to
			 
			array
			 
			$Ware.Entries

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Internal.Set.Default.Wares: Homebase=%s, Ware.Entry=%s'
			 
			arg1
			=
			[HOMEBASE]
			 
			arg2
			=
			$Ware.Entry
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			end

			endsub


			* ******************************************************************************

			* Internal.Sort.Ware.Entries:

			*  Sort ware entries by ware name

			* ******************************************************************************

			Internal.Sort.Ware.Entries
			:

			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Ware.Entries

			$Sort.Values
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			$idx

			while
			 
			$idx

			dec
			 
			$idx

			$Ware.Entry
			 
			=
			 
			$Ware.Entries
			[
			$idx
			]

			$Ware
			 
			=
			 
			$Ware.Entry
			[
			0
			]

			$szWare
			 
			=
			 
			sprintf
			:
			 
			fmt
			=
			'%s'
			,
			 
			$Ware
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null

			$Sort.Values
			[
			$idx
			]
			 
			=
			 
			$szWare

			end

			$Ware.Entries
			 
			=
			 
			sort
			 
			array
			:
			 
			data
			=
			$Ware.Entries
			 
			sort
			 
			values
			=
			$Sort.Values

			$State
			[
			$State.Ware.Entries
			]
			 
			=
			 
			$Ware.Entries

			endsub


			* ******************************************************************************

			* Internal.State.Create:

			*  Create trader state

			* ******************************************************************************

			Internal.State.Create
			:

			$State
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			30

			[THIS]
			->
			 
			set
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'
			 
			value
			=
			$State


			$State
			[
			$State.Version
			]
			 
			=
			 
			$Config
			[
			$Config.Ver.Internal
			]

			$State
			[
			$State.Mission
			]
			 
			=
			 
			$Mission.Type.None

			$State
			[
			$State.Dest
			]
			 
			=
			 
			null

			$State
			[
			$State.Ware
			]
			 
			=
			 
			null

			$State
			[
			$State.Price
			]
			 
			=
			 
			null

			$State
			[
			$State.Ware.Entries
			]
			 
			=
			 
			null

			$State
			[
			$State.Fleeing
			]
			 
			=
			 
			null

			$State
			[
			$State.Balance
			]
			 
			=
			 
			0

			$State
			[
			$State.Trade.Mode
			]
			 
			=
			 
			$Trade.Mode.Normal

			$State
			[
			$State.Tether.Sector
			]
			 
			=
			 
			null

			$State
			[
			$State.Tether.Range
			]
			 
			=
			 
			0

			$State
			[
			$State.Ver.Cmd
			]
			 
			=
			 
			0

			$State
			[
			$State.Ver.Monitor
			]
			 
			=
			 
			0

			$State
			[
			$State.Dest2
			]
			 
			=
			 
			null

			$State
			[
			$State.Reserve.Fuel
			]
			 
			=
			 
			0

			endsub


			* ******************************************************************************

			* Internal.State.Upgrade:

			*  Upgrade trader state

			* ******************************************************************************

			Internal.State.Upgrade
			:


			if
			 
			$Ver.State
			 
			<
			 
			1001000

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			4
			 
			fmt
			=
			'Internal.State.Upgrade: Upgrade 1.0.0 state missing ware entry data'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			$Tmp
			 
			=
			 
			null

			skip
			 
			if
			 
			not
			 
			[HOMEBASE]

			$Tmp
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$State
			[
			$State.Ware.Entries
			]
			 
			=
			 
			$Tmp

			$State
			[
			$State.Fleeing
			]
			 
			=
			 
			null

			end


			if
			 
			$Ver.State
			 
			<
			 
			1002000

			$State
			[
			$State.Balance
			]
			 
			=
			 
			0

			end


			if
			 
			$Ver.State
			 
			<
			 
			1004000

			resize
			 
			array
			 
			$State
			 
			to
			 
			30

			$State
			[
			$State.Trade.Mode
			]
			 
			=
			 
			$Trade.Mode.Normal

			$State
			[
			$State.Tether.Sector
			]
			 
			=
			 
			null

			$State
			[
			$State.Tether.Range
			]
			 
			=
			 
			0

			$State
			[
			$State.Ver.Cmd
			]
			 
			=
			 
			0

			$State
			[
			$State.Ver.Monitor
			]
			 
			=
			 
			0

			end


			if
			 
			$Ver.State
			 
			<
			 
			1004001

			$State
			[
			$State.Last.Mission
			]
			 
			=
			 
			$Mission.Type.None

			$State
			[
			$State.Last.Dest
			]
			 
			=
			 
			null

			$State
			[
			$State.Last.Ware
			]
			 
			=
			 
			null

			end


			if
			 
			$Ver.State
			 
			<
			 
			1004003

			$State
			[
			$State.Dest2
			]
			 
			=
			 
			null

			end


			if
			 
			$Ver.State
			 
			<
			 
			1006005

			$State
			[
			$State.Reserve.Fuel
			]
			 
			=
			 
			0

			* Infinite loop, pass in state

			* = [THIS]-> call script 'glen.trade.ok.lib' : Func=$Lib.Get.Reserve.Jump.Energy Arg1=null Arg2=null Arg3=null Arg4=null Arg5=null Arg6=null

			end


			$State
			[
			$State.Version
			]
			 
			=
			 
			$Ver.Config

			endsub


			* ******************************************************************************

			* Internal.Trade.Cache.Add:

			*  Add state cache entry

			* ******************************************************************************

			$Key
			 
			=
			 
			null

			Internal.Trade.Cache.Add
			:

			$Mission
			 
			=
			 
			$Arg1

			$Station
			 
			=
			 
			$Arg2

			$Ware
			 
			=
			 
			$Arg3


			skip
			 
			if
			 
			$Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			OR
			 
			$Mission
			 
			==
			 
			$Mission.Type.Sell

			return
			 
			null


			gosub
			 
			Make.Cache.Key
			:


			$Cache
			 
			=
			 
			$Config
			[
			$Config.Trade.Cache
			]

			$Keys
			 
			=
			 
			$Cache
			[
			1
			]

			$Values
			 
			=
			 
			$Cache
			[
			2
			]

			$Key.idx
			 
			=
			 
			get
			 
			index
			 
			of
			 
			$Key
			 
			in
			 
			array
			 
			$Keys
			 
			offset
			=
			-1


			if
			 
			$Key.idx
			 
			<
			 
			0

			$Ships
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			[THIS]
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null

			append
			 
			$Key
			 
			to
			 
			array
			 
			$Keys

			append
			 
			$Ships
			 
			to
			 
			array
			 
			$Values

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Add: Added cache and ship entry. Mission=%s, Station=%s, Ware=%s, Key=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			null

			else

			$Ships
			 
			=
			 
			$Values
			[
			$Key.idx
			]

			if
			 
			not
			 
			find
			 
			[THIS]
			 
			in
			 
			array
			:
			 
			$Ships

			append
			 
			[THIS]
			 
			to
			 
			array
			 
			$Ships

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Add: Added ship entry. Mission=%s, Station=%s, Ware=%s, Key=%s, Ships=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			$Ships

			else

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Add: Already exists. Mission=%s, Station=%s, Ware=%s, Key=%s, Ships=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			$Ships

			end

			end

			endsub


			* ******************************************************************************

			* Internal.Trade.Cache.Remove:

			*  Remove state cache entry.

			* ******************************************************************************

			Internal.Trade.Cache.Remove
			:

			$Mission
			 
			=
			 
			$Arg1

			$Station
			 
			=
			 
			$Arg2

			$Ware
			 
			=
			 
			$Arg3


			skip
			 
			if
			 
			$Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			OR
			 
			$Mission
			 
			==
			 
			$Mission.Type.Sell

			return
			 
			null


			gosub
			 
			Make.Cache.Key
			:


			$Cache
			 
			=
			 
			$Config
			[
			$Config.Trade.Cache
			]

			$Keys
			 
			=
			 
			$Cache
			[
			1
			]

			$Key.idx
			 
			=
			 
			get
			 
			index
			 
			of
			 
			$Key
			 
			in
			 
			array
			 
			$Keys
			 
			offset
			=
			-1

			if
			 
			$Key.idx
			 
			<
			 
			0

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Remove: No cache entry exists. Mission=%s, Station=%s, Ware=%s, Key=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			null

			return
			 
			null

			end


			$Values
			 
			=
			 
			$Cache
			[
			2
			]

			$Ships
			 
			=
			 
			$Values
			[
			$Key.idx
			]

			$idx
			 
			=
			 
			get
			 
			index
			 
			of
			 
			[THIS]
			 
			in
			 
			array
			 
			$Ships
			 
			offset
			=
			-1

			if
			 
			$idx
			 
			>=
			 
			0

			remove
			 
			element
			 
			from
			 
			array
			 
			$Ships
			 
			at
			 
			index
			 
			$idx

			if
			 
			not
			 
			size
			 
			of
			 
			array
			 
			$Ships

			remove
			 
			element
			 
			from
			 
			array
			 
			$Keys
			 
			at
			 
			index
			 
			$Key.idx

			remove
			 
			element
			 
			from
			 
			array
			 
			$Values
			 
			at
			 
			index
			 
			$Key.idx

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Remove: Removed ship and cache entries. Mission=%s, Station=%s, Ware=%s, Key=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			null

			else

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Remove: Removed ship entry. Mission=%s, Station=%s, Ware=%s, Key=%s. Remaining ships=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			$Ships

			end

			else

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Remove: No ship entry exists. Mission=%s, Station=%s, Ware=%s, Key=%s, Ships=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			$Ships

			end

			endsub


			* ******************************************************************************

			* Check.Competition

			*  Check if another OK trader is performing the same trade at a factory.

			* ******************************************************************************

			Lib.State.Check.Competition
			:

			$rc
			 
			=
			 
			0

			$Mission
			 
			=
			 
			$Arg1

			$Station
			 
			=
			 
			$Arg2

			$Ware
			 
			=
			 
			$Arg3


			skip
			 
			if
			 
			$Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			OR
			 
			$Mission
			 
			==
			 
			$Mission.Type.Sell

			return
			 
			null


			gosub
			 
			Make.Cache.Key
			:


			$Cache
			 
			=
			 
			$Config
			[
			$Config.Trade.Cache
			]

			$Keys
			 
			=
			 
			$Cache
			[
			1
			]

			$Key.idx
			 
			=
			 
			get
			 
			index
			 
			of
			 
			$Key
			 
			in
			 
			array
			 
			$Keys
			 
			offset
			=
			-1

			if
			 
			$Key.idx
			 
			<
			 
			0

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Test: No cache entry exists. Mission=%s, Station=%s, Ware=%s, Key=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			null

			return
			 
			0

			end


			$Values
			 
			=
			 
			$Cache
			[
			2
			]

			$Ships
			 
			=
			 
			$Values
			[
			$Key.idx
			]

			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Ships

			while
			 
			$idx
			 
			>
			 
			0

			dec
			 
			$idx

			$Ship
			 
			=
			 
			$Ships
			[
			$idx
			]


			$Stale
			 
			=
			 
			1

			while
			 
			1

			skip
			 
			if
			 
			$Ship
			->
			 
			exists

			break

			skip
			 
			if
			 
			$Ship
			->
			 
			is
			 
			script
			 
			glen.trade.ok.cmd
			 
			on
			 
			stack
			 
			of
			 
			task
			=
			0

			break

			$Ship.State
			 
			=
			 
			$Ship
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Fetch
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			$Ship.Ware
			 
			=
			 
			$Ship.State
			[
			$State.Ware
			]

			skip
			 
			if
			 
			$Ship.Ware
			 
			==
			 
			$Ware

			break


			$Ship.Mission
			 
			=
			 
			$Ship.State
			[
			$State.Mission
			]

			$Ship.Dest
			 
			=
			 
			$Ship.State
			[
			$State.Dest
			]

			$Ship.Dest2
			 
			=
			 
			$Ship.State
			[
			$State.Dest2
			]


			if
			 
			$Ship.Mission
			 
			==
			 
			$Mission.Type.Buy

			if
			 
			(
			$Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			AND
			 
			$Ship.Dest
			 
			!=
			 
			$Station
			)
			 
			OR
			 
			(
			$Mission
			 
			==
			 
			$Mission.Type.Sell
			 
			AND
			 
			$Ship.Dest2
			 
			!=
			 
			$Station
			)

			break

			end

			else
			 
			if
			 
			$Ship.Mission
			 
			!=
			 
			$Mission
			 
			OR
			 
			$Ship.Dest
			 
			!=
			 
			$Station

			break

			end

			$Stale
			 
			=
			 
			0

			skip
			 
			if
			 
			$Ship
			 
			!=
			 
			[THIS]

			break

			$rc
			 
			=
			 
			1

			break

			end


			if
			 
			$Stale

			remove
			 
			element
			 
			from
			 
			array
			 
			$Ships
			 
			at
			 
			index
			 
			$idx

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Test: Removed stale ship entry. Mission=%s, Station=%s, Ware=%s, Key=%s, Ship=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			$Ship

			end

			skip
			 
			if
			 
			not
			 
			$rc

			break

			end


			if
			 
			not
			 
			size
			 
			of
			 
			array
			 
			$Ships

			remove
			 
			element
			 
			from
			 
			array
			 
			$Keys
			 
			at
			 
			index
			 
			$Key.idx

			remove
			 
			element
			 
			from
			 
			array
			 
			$Values
			 
			at
			 
			index
			 
			$Key.idx

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Test: Removed stale cache entry. Mission=%s, Station=%s, Ware=%s, Key=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			null

			end


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Trade.Cache.Test: Mission=%s, Station=%s, Ware=%s, Key=%s, rc=%s'
			 
			arg1
			=
			$Mission
			 
			arg2
			=
			$Station
			 
			arg3
			=
			$Ware
			 
			arg4
			=
			$Key
			 
			arg5
			=
			$rc

			endsub


			* ******************************************************************************

			*

			*  Check if another OK trader is performing the same trade at a factory.

			* ******************************************************************************

			Make.Cache.Key
			:

			$Station.Id
			 
			=
			 
			$Station
			->
			 
			get
			 
			ID
			 
			code

			$Ware.Maintype
			 
			=
			 
			get
			 
			maintype
			 
			of
			 
			ware
			 
			$Ware

			$Ware.Subtype
			 
			=
			 
			get
			 
			subtype
			 
			of
			 
			ware
			 
			$Ware

			$Key
			 
			=
			 
			sprintf
			:
			 
			fmt
			=
			'%s_%s_%s_%s'
			,
			 
			$Mission
			,
			 
			$Station.Id
			,
			 
			$Ware.Maintype
			,
			 
			$Ware.Subtype
			,
			 
			null

			endsub


			* ******************************************************************************

			* Auto.Rename

			* ******************************************************************************

			Auto.Rename
			:

			skip
			 
			if
			 
			$Config
			[
			$Config.Auto.Rename
			]

			endsub

			$PageId
			 
			=
			 
			$Config
			[
			$Config.PageId
			]


			$Name.Old
			 
			=
			 
			[THIS]
			->
			 
			get
			 
			name

			$Name.Job
			 
			=
			 
			null

			$Name.Home
			 
			=
			 
			null


			if
			 
			[HOMEBASE]

			$Name.Home
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			name

			gosub
			 
			Get.Job.Homebased
			:

			else

			$Tether.Sector
			 
			=
			 
			$State
			[
			$State.Tether.Sector
			]

			skip
			 
			if
			 
			not
			 
			$Tether.Sector

			$Name.Home
			 
			=
			 
			sprintf
			:
			 
			fmt
			=
			'%s'
			,
			 
			$Tether.Sector
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null

			$Trade.Mode
			 
			=
			 
			$State
			[
			$State.Trade.Mode
			]

			if
			 
			$Trade.Mode
			 
			==
			 
			$Trade.Mode.Player

			$Name.Job
			 
			=
			 
			read
			 
			text
			:
			 
			page
			=
			$PageId
			 
			id
			=
			1102

			else
			 
			if
			 
			$Trade.Mode
			 
			==
			 
			$Trade.Mode.Economy

			$Name.Job
			 
			=
			 
			read
			 
			text
			:
			 
			page
			=
			$PageId
			 
			id
			=
			1101

			else

			$Name.Job
			 
			=
			 
			read
			 
			text
			:
			 
			page
			=
			$PageId
			 
			id
			=
			1100

			end

			end


			skip
			 
			if
			 
			$Name.Job

			endsub

			if
			 
			$Name.Home

			$Name.New
			 
			=
			 
			sprintf
			:
			 
			fmt
			=
			'%s (%s)'
			,
			 
			$Name.Job
			,
			 
			$Name.Home
			,
			 
			null
			,
			 
			null
			,
			 
			null

			else

			$Name.New
			 
			=
			 
			$Name.Job

			end


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			7
			 
			fmt
			=
			'Auto-rename: Old=%s, New=%s'
			 
			arg1
			=
			$Name.Old
			 
			arg2
			=
			$Name.New
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null


			[THIS]
			->
			 
			set
			 
			name
			 
			to
			 
			$Name.New

			endsub


			* ******************************************************************************

			* Get.Job.Homebased

			* Input: $Mission, $Ware

			* ******************************************************************************

			Get.Job.Homebased
			:


			$Ware.Naming
			 
			=
			 
			null

			* Identify which ware trader is bringing home

			if
			 
			(
			$Mission
			 
			==
			 
			$Mission.Type.Move.Station
			)
			 
			AND
			 
			(
			$Dest
			 
			==
			 
			[HOMEBASE]
			)

			$Ware.Entries
			 
			=
			 
			$State
			[
			$State.Ware.Entries
			]

			skip
			 
			if
			 
			$Ware.Entries

			endsub


			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Ware.Entries

			while
			 
			$idx

			dec
			 
			$idx

			$Ware.Entry
			 
			=
			 
			$Ware.Entries
			[
			$idx
			]

			$Entry.Ware
			 
			=
			 
			$Ware.Entry
			[
			0
			]

			$Entry.Mode
			 
			=
			 
			$Ware.Entry
			[
			1
			]

			if
			 
			$Entry.Mode
			 
			==
			 
			$Mission.Type.Buy

			$Entry.Have
			 
			=
			 
			[THIS]
			->
			 
			get
			 
			amount
			 
			of
			 
			ware
			 
			$Entry.Ware
			 
			in
			 
			cargo
			 
			bay

			if
			 
			$Entry.Have

			$Entry.Reserved
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Reserved.Amount
			 
			Arg1
			=
			$Entry.Ware
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			if
			 
			$Entry.Have
			 
			>
			 
			$Entry.Reserved

			$Ware.Naming
			 
			=
			 
			$Entry.Ware

			break

			end

			end

			end

			end


			else
			 
			if
			 
			(
			$Mission
			 
			==
			 
			$Mission.Type.Buy
			)
			 
			OR
			 
			(
			$Mission
			 
			==
			 
			$Mission.Type.Sell
			)

			$Ware.Naming
			 
			=
			 
			$Ware

			end


			* [8] -- W - Lasers   10021 Weapons Dealer

			* [9] -- W - Shields  10026 High Tech Transporter

			* [10] - W - Missiles 10021 Weapons Dealer

			* [11] - W - Energy   10022 Energy Transporter

			* [12] - W - Naturals 10003 Freight Transporter

			* [13] - W - Bio      10024 Bio Transporter

			* [14] - W - Food     10025 Food Transporter

			* [15] - W - Mineral  10023 Ore Transporter

			* [16] - W - Tech     10026 High Tech Transporter


			$Job.TextId
			 
			=
			 
			10003

			if
			 
			$Ware.Naming

			$MainType
			 
			=
			 
			get
			 
			maintype
			 
			of
			 
			ware
			 
			$Ware.Naming


			if
			 
			(
			$MainType
			 
			==
			 
			8
			)
			 
			OR
			 
			(
			$MainType
			 
			==
			 
			10
			)

			$Job.TextId
			 
			=
			 
			10021

			else
			 
			if
			 
			(
			$MainType
			 
			==
			 
			9
			)
			 
			OR
			 
			(
			$MainType
			 
			==
			 
			16
			)

			$Job.TextId
			 
			=
			 
			10026

			else
			 
			if
			 
			$MainType
			 
			==
			 
			11

			$Job.TextId
			 
			=
			 
			10022

			else
			 
			if
			 
			$MainType
			 
			==
			 
			13

			$Job.TextId
			 
			=
			 
			10024

			else
			 
			if
			 
			$MainType
			 
			==
			 
			14

			$Job.TextId
			 
			=
			 
			10025

			else
			 
			if
			 
			$MainType
			 
			==
			 
			15

			$Job.TextId
			 
			=
			 
			10023

			end

			end


			$Name.Job
			 
			=
			 
			read
			 
			text
			:
			 
			page
			=
			1000
			 
			id
			=
			$Job.TextId

			endsub
