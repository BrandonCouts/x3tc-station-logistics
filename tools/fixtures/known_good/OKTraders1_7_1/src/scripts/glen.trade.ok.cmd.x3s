#name: glen.trade.ok.cmd
#lang: 44
#origin_mod: OKTraders1_7_1
#source: mods/OKTraders1_7_1/scripts/glen.trade.ok.cmd.xml


			* ******************************************************************************

			* OK Trade

			*  The main command script with the trading loop

			* ******************************************************************************


			$Comp
			 
			=
			 
			'Cmd'


			set
			 
			script
			 
			command
			:
			 
			[GLEN_OK_TRADE]


			$Config
			 
			=
			 
			get
			 
			global
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'

			skip
			 
			if
			 
			$Config

			return
			 
			null


			$Homebase.Start
			 
			=
			 
			[HOMEBASE]


			* Config array members

			$Config.Ver.Internal
			 
			=
			 
			3

			$Config.PageId
			 
			=
			 
			4

			$Config.Debug.Enabled
			 
			=
			 
			5

			$Config.All.Wares
			 
			=
			 
			13

			$Config.Refuel.Percent
			 
			=
			 
			17

			$Config.Equip
			 
			=
			 
			20


			$Ver.Internal
			 
			=
			 
			$Config
			[
			$Config.Ver.Internal
			]

			$PageId
			 
			=
			 
			$Config
			[
			$Config.PageId
			]


			* Ware entry members

			$Ware.Entry.Ware
			 
			=
			 
			0

			$Ware.Entry.Mode
			 
			=
			 
			1


			* Mission types. Maps from Ware.Entry.Mode

			$Mission.Type.None
			 
			=
			 
			0

			$Mission.Type.Buy
			 
			=
			 
			1

			$Mission.Type.Sell
			 
			=
			 
			2

			$Mission.Type.Move.Station
			 
			=
			 
			3


			* State contents

			$State.Version
			 
			=
			 
			0

			$State.Mission
			 
			=
			 
			1

			$State.Dest
			 
			=
			 
			2

			$State.Ware
			 
			=
			 
			3

			$State.Price
			 
			=
			 
			4

			$State.Ware.Entries
			 
			=
			 
			5

			$State.Fleeing
			 
			=
			 
			6

			$State.Balance
			 
			=
			 
			7

			$State.Trade.Mode
			 
			=
			 
			8

			$State.Tether.Sector
			 
			=
			 
			9

			$State.Tether.Range
			 
			=
			 
			10

			$State.Ver.Cmd
			 
			=
			 
			11

			$State.Ver.Monitor
			 
			=
			 
			12

			$State.Last.Mission
			 
			=
			 
			13

			$State.Last.Dest
			 
			=
			 
			14

			$State.Last.Ware
			 
			=
			 
			15

			$State.Dest2
			 
			=
			 
			16


			$Trade.Mode.Normal
			 
			=
			 
			0

			$Trade.Mode.Economy
			 
			=
			 
			1

			$Trade.Mode.Player
			 
			=
			 
			2


			* Defined to avoid warnings, compiler doesn't follow gosubs

			$Mission.Type
			 
			=
			 
			$Mission.Type.None

			$Last.Mission
			 
			=
			 
			$Mission.Type.None

			$Mission.Dest
			 
			=
			 
			null

			$Mission.Dest2
			 
			=
			 
			null

			$Mission.Ware
			 
			=
			 
			null

			$Mission.Price
			 
			=
			 
			null

			$State
			 
			=
			 
			null


			* Whether the cmd script should resume an existing mission

			$Directive.Type.Start
			 
			=
			 
			0

			$Directive.Type.Resume
			 
			=
			 
			1


			* Library functions

			$Lib.Restart.Cmd
			 
			=
			 
			1

			$Lib.Check.Cmd.Enabled
			 
			=
			 
			6

			$Lib.Can.Trade.Ware
			 
			=
			 
			8

			$Lib.Find.Shipyard
			 
			=
			 
			11

			$Lib.Test.Buys.Infinite.Wares
			 
			=
			 
			14

			$Lib.Restart.Monitor
			 
			=
			 
			15

			$Lib.Find.Station
			 
			=
			 
			16

			$Lib.Get.Tradeable.Wares
			 
			=
			 
			19

			$Lib.Get.Best.Ware.To.Buy
			 
			=
			 
			20

			$Lib.Get.Best.Ware.To.Sell
			 
			=
			 
			23

			$Lib.Get.Amount.For.Sale
			 
			=
			 
			24

			$Lib.Get.Needs.Refuel
			 
			=
			 
			26

			$Lib.Get.Refuel.Dest
			 
			=
			 
			27

			$Lib.Get.Repair.Cost
			 
			=
			 
			29

			$Lib.Get.Eco.Mission
			 
			=
			 
			36


			$Lib.Generic.Clone.Array
			 
			=
			 
			3


			* State functions

			$Lib.State.Fetch
			 
			=
			 
			0

			$Lib.State.Publish
			 
			=
			 
			1

			$Lib.State.Get.Excludes
			 
			=
			 
			4

			$Lib.State.Check.Competition
			 
			=
			 
			5


			* Action functions

			$Cmd.Move.Station
			 
			=
			 
			1

			$Cmd.Buy.Ware
			 
			=
			 
			2

			$Cmd.Sell.Ware
			 
			=
			 
			3

			$Cmd.Offload.Wares
			 
			=
			 
			4

			$Cmd.Load.Jumpdrive.Energy
			 
			=
			 
			5

			$Cmd.None
			 
			=
			 
			6

			$Cmd.Repair
			 
			=
			 
			7

			$Cmd.Equip
			 
			=
			 
			9


			* Find flags

			$Find.Ignore.Competition
			 
			=
			 
			1

			$Find.Force.Best.Price
			 
			=
			 
			2

			$Find.Equipping
			 
			=
			 
			4

			$Find.Eco
			 
			=
			 
			8


			* Equipping config

			$Config.Equip.Ver
			 
			=
			 
			0

			$Config.Equip.Lasers
			 
			=
			 
			1

			$Config.Equip.Shields
			 
			=
			 
			2

			$Config.Equip.Missiles
			 
			=
			 
			3

			$Config.Equip.Drones
			 
			=
			 
			4

			$Config.Equip.DockingComputer
			 
			=
			 
			5

			$Config.Equip.Jumpdrive
			 
			=
			 
			6

			$Config.Equip.Triplex
			 
			=
			 
			7

			$Config.Equip.Rudder
			 
			=
			 
			8


			$Equip.Config
			 
			=
			 
			$Config
			[
			$Config.Equip
			]


			$Null
			 
			=
			 
			null


			* Enable auto jumping to avoid having to manually enable it on traders

			[THIS]
			->
			 
			autojump
			 
			minimum
			 
			jumps
			=
			 
			0

			[THIS]
			->
			 
			set
			 
			autojump
			 
			active
			:
			 
			1


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Start: Directive=%s, Version=%s'
			 
			arg1
			=
			$Directive
			 
			arg2
			=
			$Ver.Internal
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null


			gosub
			 
			State.Get
			:

			$State
			[
			$State.Ver.Cmd
			]
			 
			=
			 
			$Ver.Internal


			if
			 
			$Directive
			 
			==
			 
			$Directive.Type.Start

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Publish
			 
			Arg1
			=
			$Mission.Type.None
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			end


			* ******************************************************************************

			* Main loop

			* ******************************************************************************

			while
			 
			1

			if
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			$Energy
			 
			=
			 
			[THIS]
			->
			get
			 
			amount
			 
			of
			 
			ware
			 
			{Energy Cells}
			 
			in
			 
			cargo
			 
			bay

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			9
			 
			fmt
			=
			'Cmd: Directive=%s, Mission.Type=%s, Environment=%s, Energy=%s'
			 
			arg1
			=
			$Directive
			 
			arg2
			=
			$Mission.Type
			 
			arg3
			=
			[ENVIRONMENT]
			 
			arg4
			=
			$Energy
			 
			arg5
			=
			null

			end


			gosub
			 
			Sanity.Check
			:

			gosub
			 
			State.Get
			:


			* Start the monitor script if it's not already running

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Restart.Monitor
			 
			Arg1
			=
			[THIS]
			 
			Arg2
			=
			0
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null


			$Action.Performed
			 
			=
			 
			0


			if
			 
			[DOCKEDAT]
			->
			 
			is
			 
			of
			 
			class
			 
			[Station]

			* Clear fleeing state when docked to avoid getting stuck

			$State
			[
			$State.Fleeing
			]
			 
			=
			 
			null

			gosub
			 
			Offload.Wares
			:

			skip
			 
			if
			 
			not
			 
			[DOCKEDAT]
			->
			 
			is
			 
			of
			 
			class
			 
			[Shipyard]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.Repair
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.Equip
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			end


			skip
			 
			if
			 
			$Mission.Type
			 
			!=
			 
			$Mission.Type.None

			gosub
			 
			Select.Mission
			:

			skip
			 
			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.None

			gosub
			 
			Perform.Mission
			:


			* When an action is performed this updates the displayed command. When idle,

			* re-display the OK Trade command.

			[THIS]
			->
			 
			set
			 
			command
			:
			 
			[GLEN_OK_TRADE]
			  
			target
			=
			null
			 
			target2
			=
			null
			 
			par1
			=
			null
			 
			par2
			=
			null

			[THIS]
			->
			 
			set
			 
			destination
			 
			to
			 
			null

			[THIS]
			->
			 
			set
			 
			wanted
			 
			ware
			 
			count
			 
			to
			 
			null

			[THIS]
			->
			 
			set
			 
			wanted
			 
			ware
			 
			to
			 
			null


			if
			 
			$Action.Performed

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			9
			 
			fmt
			=
			'Short wait'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			=
			 
			wait
			 
			randomly
			 
			from
			 
			2000
			 
			to
			 
			4000
			 
			ms

			else

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			9
			 
			fmt
			=
			'Long wait'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			=
			 
			wait
			 
			randomly
			 
			from
			 
			6000
			 
			to
			 
			12000
			 
			ms

			end

			end


			* ******************************************************************************

			* Sanity.Check

			*  Called on entry and after yielding execution. Checks the script should still

			*  be running, and whether it needs to restart due to upgrade.

			* ******************************************************************************

			$Ware.Entries
			 
			=
			 
			null

			Sanity.Check
			:

			$Cmd.Enabled
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Check.Cmd.Enabled
			 
			Arg1
			=
			[THIS]
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			if
			 
			not
			 
			$Cmd.Enabled

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Sanity.Check: Lib.Check.Cmd.Enabled returned 0'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			return
			 
			null

			end


			if
			 
			[HOMEBASE]
			 
			!=
			 
			$Homebase.Start

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Sanity.Check: Homebase has changed since script started'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			return
			 
			null

			end


			if
			 
			[HOMEBASE]

			if
			 
			not
			 
			is
			 
			datatype
			[
			$Ware.Entries
			]
			 
			==
			 
			[DATATYPE_ARRAY]

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Sanity.Check: Homebase specified but no ware entries'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			return
			 
			null

			end


			if
			 
			not
			 
			size
			 
			of
			 
			array
			 
			$Ware.Entries

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Sanity.Check: Ware entry array is empty'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			return
			 
			null

			end

			end


			* Config can be replaced on downgrade or removed at uninstall

			$Config
			 
			=
			 
			get
			 
			global
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'

			skip
			 
			if
			 
			$Config

			return
			 
			null

			$Equip.Config
			 
			=
			 
			$Config
			[
			$Config.Equip
			]


			$Ver.New
			 
			=
			 
			$Config
			[
			$Config.Ver.Internal
			]

			if
			 
			$Ver.Internal
			 
			!=
			 
			$Ver.New

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Sanity.Check: Version changed from %s to %s.'
			 
			arg1
			=
			$Ver.Internal
			 
			arg2
			=
			$Ver.New
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			START
			 
			$Null
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Restart.Cmd
			 
			Arg1
			=
			[THIS]
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			return
			 
			null

			end

			endsub


			* ******************************************************************************

			* Perform.Mission

			*  Perform the selected mission

			* ******************************************************************************

			Perform.Mission
			:

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			8
			 
			fmt
			=
			'Perform.Mission: type=%s, dest=%s, ware=%s, price=%s, cur=%s'
			 
			arg1
			=
			$Mission.Type
			 
			arg2
			=
			$Mission.Dest
			 
			arg3
			=
			$Mission.Ware
			 
			arg4
			=
			$Mission.Price
			 
			arg5
			=
			[SECTOR]


			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.Move.Station

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Publish
			 
			Arg1
			=
			$Mission.Type.Move.Station
			 
			Arg2
			=
			$Mission.Dest
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			else
			 
			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.Buy

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Publish
			 
			Arg1
			=
			$Mission.Type.Buy
			 
			Arg2
			=
			$Mission.Dest
			 
			Arg3
			=
			$Mission.Ware
			 
			Arg4
			=
			$Mission.Price
			 
			Arg5
			=
			$Mission.Dest2

			else
			 
			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.Sell

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Publish
			 
			Arg1
			=
			$Mission.Type.Sell
			 
			Arg2
			=
			$Mission.Dest
			 
			Arg3
			=
			$Mission.Ware
			 
			Arg4
			=
			$Mission.Price
			 
			Arg5
			=
			null

			else

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Publish
			 
			Arg1
			=
			$Mission.Type.None
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			end


			skip
			 
			if
			 
			not
			 
			[DOCKEDAT]
			->
			 
			is
			 
			of
			 
			class
			 
			[Station]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.Load.Jumpdrive.Energy
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null


			* Check if we can make it to dest or need refuel

			if
			 
			$Mission.Type
			 
			!=
			 
			$Mission.Type.None
			 
			AND
			 
			$Mission.Dest

			* Check if we must refuel based on ability to jump both to dest then to an energy source

			if
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Needs.Refuel
			 
			Arg1
			=
			$Mission.Dest
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			$Station
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Refuel.Dest
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			if
			 
			$Station

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Perform.Mission: Need to refuel, dest=%s'
			 
			arg1
			=
			$Station
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			$Mission.Type
			 
			=
			 
			$Mission.Type.Move.Station

			$Mission.Dest
			 
			=
			 
			$Station

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Publish
			 
			Arg1
			=
			$Mission.Type.Move.Station
			 
			Arg2
			=
			$Mission.Dest
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			else

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Perform.Mission: Need to fuel but nowhere to go'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			end

			end

			end


			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.Move.Station

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.Move.Station
			 
			Arg1
			=
			$Mission.Dest
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			else
			 
			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.Buy

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.Buy.Ware
			 
			Arg1
			=
			$Mission.Ware
			 
			Arg2
			=
			$Mission.Dest
			 
			Arg3
			=
			$Mission.Dest2
			 
			Arg4
			=
			$Mission.Price
			 
			Arg5
			=
			null

			else
			 
			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.Sell

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.Sell.Ware
			 
			Arg1
			=
			$Mission.Ware
			 
			Arg2
			=
			$Mission.Dest
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			else

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.None
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			end


			gosub
			 
			Sanity.Check
			:


			skip
			 
			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.None

			$Action.Performed
			 
			=
			 
			1


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			10
			 
			fmt
			=
			'Perform.Mission: exit'
			 
			arg1
			=
			$Mission.Type
			 
			arg2
			=
			$Mission.Dest
			 
			arg3
			=
			$Mission.Ware
			 
			arg4
			=
			$Mission.Price
			 
			arg5
			=
			null

			endsub


			* ******************************************************************************

			* Select.Mission

			*  Select a mission for the trader to perform

			* ******************************************************************************

			Select.Mission
			:

			$Mission.Type
			 
			=
			 
			$Mission.Type.None

			$Mission.Dest
			 
			=
			 
			null

			$Mission.Dest2
			 
			=
			 
			null

			$Mission.Ware
			 
			=
			 
			null

			$Mission.Price
			 
			=
			 
			null


			while
			 
			1


			* Buy engine tunings

			if
			 
			[THIS]
			->
			 
			get
			 
			free
			 
			amount
			 
			of
			 
			ware
			 
			{Engine Tuning}
			 
			in
			 
			cargo
			 
			bay

			if
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Can.Trade.Ware
			 
			Arg1
			=
			{Engine Tuning}
			 
			Arg2
			=
			$Mission.Type.Buy
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			$Excludes
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Get.Excludes
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			$Flags
			 
			=
			 
			(
			$Find.Ignore.Competition
			 
			|
			 
			$Find.Equipping
			)

			$Station
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Find.Station
			 
			Arg1
			=
			{Engine Tuning}
			 
			Arg2
			=
			$Mission.Type.Buy
			 
			Arg3
			=
			$Excludes
			 
			Arg4
			=
			[SECTOR]
			 
			Arg5
			=
			$Flags
			 
			Arg6
			=
			null

			if
			 
			$Station

			$Mission.Type
			 
			=
			 
			$Mission.Type.Move.Station

			$Mission.Dest
			 
			=
			 
			$Station

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission: Buying engine tunings at %s'
			 
			arg1
			=
			$Station
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end

			end

			end


			* Buy a jumpdrive

			if
			 
			$Equip.Config
			[
			$Config.Equip.Jumpdrive
			]

			if
			 
			not
			 
			[THIS]
			->
			 
			get
			 
			amount
			 
			of
			 
			ware
			 
			{Jumpdrive}
			 
			in
			 
			cargo
			 
			bay

			if
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Can.Trade.Ware
			 
			Arg1
			=
			{Jumpdrive}
			 
			Arg2
			=
			$Mission.Type.Buy
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			$Excludes
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Get.Excludes
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			$Flags
			 
			=
			 
			(
			$Find.Ignore.Competition
			 
			|
			 
			$Find.Equipping
			)

			$Station
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Find.Station
			 
			Arg1
			=
			{Jumpdrive}
			 
			Arg2
			=
			$Mission.Type.Buy
			 
			Arg3
			=
			$Excludes
			 
			Arg4
			=
			[SECTOR]
			 
			Arg5
			=
			$Flags
			 
			Arg6
			=
			null

			if
			 
			$Station

			$Mission.Type
			 
			=
			 
			$Mission.Type.Move.Station

			$Mission.Dest
			 
			=
			 
			$Station

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission: Equipping a jumpdrive at %s'
			 
			arg1
			=
			$Station
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end

			end

			end

			end


			* Disabled for now. See how it fares without.

			* Check if we must refuel based on percentage of energy reserve remaining

			* if [THIS]-> call script 'glen.trade.ok.lib' : Func=$Lib.Get.Needs.Refuel Arg1=null Arg2=null Arg3=null Arg4=null Arg5=null

			* $Mission.Dest = [THIS]-> call script 'glen.trade.ok.lib' : Func=$Lib.Get.Refuel.Dest Arg1=null Arg2=null Arg3=null Arg4=null Arg5=null

			* if $Mission.Dest

			* skip if not $Config[$Config.Debug.Enabled]

			* = [THIS]-> call script 'glen.trade.ok.trace' : comp=$Comp lvl=5 fmt='Select.Mission: Refuel at %s' arg1=$Mission.Dest arg2=null arg3=null arg4=null arg5=null

			* $Mission.Type = $Mission.Type.Move.Station

			* break

			* else

			* skip if not $Config[$Config.Debug.Enabled]

			* = [THIS]-> call script 'glen.trade.ok.trace' : comp=$Comp lvl=5 fmt='Select.Mission: Need to refuel but nowhere to go' arg1=null arg2=null arg3=null arg4=null arg5=null

			* end

			* end


			* Repair

			$Hull.Percent
			 
			=
			 
			[THIS]
			->
			 
			get
			 
			hull
			 
			percent

			if
			 
			$Hull.Percent
			 
			<
			 
			100

			$Shipyard
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Find.Shipyard
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			if
			 
			$Shipyard


			$Cost
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Repair.Cost
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			$Funds
			 
			=
			 
			get
			 
			player
			 
			money

			skip
			 
			if
			 
			not
			 
			[HOMEBASE]

			$Funds
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			money

			if
			 
			$Funds
			 
			>
			 
			$Cost

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission: Going for repairs at %s'
			 
			arg1
			=
			$Mission.Dest
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			$Mission.Type
			 
			=
			 
			$Mission.Type.Move.Station

			$Mission.Dest
			 
			=
			 
			$Shipyard

			end

			end

			end


			* If not repairing pick a mission

			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.None

			if
			 
			[HOMEBASE]

			gosub
			 
			Select.Mission.Homebased
			:

			else

			gosub
			 
			Select.Mission.Free.Trader
			:

			end

			end


			break

			end

			endsub


			* ******************************************************************************

			* Select.Mission.Homebased:

			*  Select a mission for a homebased trader

			* ******************************************************************************

			Select.Mission.Homebased
			:

			$Max.Jumps
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			max
			 
			trade
			 
			jumps

			$Home.Sector
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			sector


			$Prioritized.Tradeable.Ware.Entries
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Tradeable.Wares
			 
			Arg1
			=
			$Ware.Entries
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			$Default.Excludes
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Get.Excludes
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			append
			 
			[HOMEBASE]
			 
			to
			 
			array
			 
			$Default.Excludes


			* Select a ware to trade

			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Prioritized.Tradeable.Ware.Entries

			while
			 
			$idx

			dec
			 
			$idx


			$Ware.Entry
			 
			=
			 
			$Prioritized.Tradeable.Ware.Entries
			[
			$idx
			]

			$Ware
			 
			=
			 
			$Ware.Entry
			[
			$Ware.Entry.Ware
			]

			$Mode
			 
			=
			 
			$Ware.Entry
			[
			$Ware.Entry.Mode
			]


			$Excludes
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib.generic
			 
			:
			 
			Func
			=
			$Lib.Generic.Clone.Array
			 
			Arg1
			=
			$Default.Excludes
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			$Station
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Find.Station
			 
			Arg1
			=
			$Ware
			 
			Arg2
			=
			$Mode
			 
			Arg3
			=
			$Excludes
			 
			Arg4
			=
			null
			 
			Arg5
			=
			0
			 
			Arg6
			=
			null

			if
			 
			$Station
			->
			 
			exists

			if
			 
			$Mode
			 
			==
			 
			$Mission.Type.Sell
			 
			AND
			 
			[ENVIRONMENT]
			 
			!=
			 
			[HOMEBASE]

			if
			 
			not
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Amount.For.Sale
			 
			Arg1
			=
			$Ware
			 
			Arg2
			=
			$Station
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			$Mission.Type
			 
			=
			 
			$Mission.Type.Move.Station

			$Mission.Dest
			 
			=
			 
			[HOMEBASE]

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission.Homebased: Must return to homebase to load ware %s for sale mission'
			 
			arg1
			=
			$Ware
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end

			end


			$Price
			 
			=
			 
			[HOMEBASE]
			->
			 
			get
			 
			price
			 
			of
			 
			ware
			 
			$Ware

			$Mission.Type
			 
			=
			 
			$Mode

			$Mission.Dest
			 
			=
			 
			$Station

			$Mission.Dest2
			 
			=
			 
			[HOMEBASE]

			$Mission.Ware
			 
			=
			 
			$Ware

			$Mission.Price
			 
			=
			 
			$Price

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission.Homebased: Trade opportunity: ware=%s, dest=%s, mode=%s, price=%s'
			 
			arg1
			=
			$Mission.Ware
			 
			arg2
			=
			$Mission.Dest
			 
			arg3
			=
			$Mission.Type
			 
			arg4
			=
			$Mission.Price
			 
			arg5
			=
			null

			break

			end

			end


			if
			 
			$Mission.Type
			 
			==
			 
			$Mission.Type.None
			 
			AND
			 
			[ENVIRONMENT]
			 
			!=
			 
			[HOMEBASE]

			$Mission.Type
			 
			=
			 
			$Mission.Type.Move.Station

			$Mission.Dest
			 
			=
			 
			[HOMEBASE]

			end

			endsub


			* ******************************************************************************

			* Select.Mission.Free.Trader

			*  Pick a mission for a free trader

			* ******************************************************************************

			Select.Mission.Free.Trader
			:

			while
			 
			1


			* Flog anything on board that isn't nailed down.

			* Cannot have eco traders getting clogged up, so fall back to selling for profit

			$rc
			 
			=
			 
			null

			$Trade.Mode
			 
			=
			 
			$State
			[
			$State.Trade.Mode
			]

			if
			 
			$Trade.Mode
			 
			==
			 
			$Trade.Mode.Economy

			$rc
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Best.Ware.To.Sell
			 
			Arg1
			=
			$Find.Eco
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			gosub
			 
			Sanity.Check
			:

			end

			if
			 
			not
			 
			$rc

			$rc
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Best.Ware.To.Sell
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			gosub
			 
			Sanity.Check
			:

			end


			if
			 
			$rc

			$Ware
			 
			=
			 
			$rc
			[
			0
			]

			$Sell.At
			 
			=
			 
			$rc
			[
			1
			]

			$Price
			 
			=
			 
			$rc
			[
			2
			]


			* Because waits are involved another ship may have won a race to this trade. Try again after a short wait

			$Competition
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Check.Competition
			 
			Arg1
			=
			$Mission.Type.Sell
			 
			Arg2
			=
			$Sell.At
			 
			Arg3
			=
			$Ware
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			if
			 
			$Competition

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission.Free.Trader: Lost a race to a sale. Ware=%s, Dest=%s'
			 
			arg1
			=
			$Ware
			 
			arg2
			=
			$Sell.At
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			$Action.Performed
			 
			=
			 
			1

			break

			end


			$Mission.Type
			 
			=
			 
			$Mission.Type.Sell

			$Mission.Dest
			 
			=
			 
			$Sell.At

			$Mission.Ware
			 
			=
			 
			$Ware

			$Mission.Price
			 
			=
			 
			$Price


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission.Free.Trader: Sell %s at %s for %s'
			 
			arg1
			=
			$Ware
			 
			arg2
			=
			$Sell.At
			 
			arg3
			=
			$Price
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end


			* Find the most profitable trade

			$rc
			 
			=
			 
			null

			$Trade.Mode
			 
			=
			 
			$State
			[
			$State.Trade.Mode
			]

			if
			 
			$Trade.Mode
			 
			==
			 
			$Trade.Mode.Economy

			$rc
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Eco.Mission
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			* $rc = [THIS]-> call script 'glen.trade.ok.lib' : Func=$Lib.Get.Best.Ware.To.Buy Arg1=$Find.Eco Arg2=null Arg3=null Arg4=null Arg5=null Arg6=null

			gosub
			 
			Sanity.Check
			:

			end

			if
			 
			not
			 
			$rc

			$rc
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.Get.Best.Ware.To.Buy
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			gosub
			 
			Sanity.Check
			:

			end


			if
			 
			not
			 
			$rc

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission.Free.Trader: Nothing to trade'
			 
			arg1
			=
			null
			 
			arg2
			=
			null
			 
			arg3
			=
			null
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end


			$Ware
			 
			=
			 
			$rc
			[
			0
			]

			$Dest
			 
			=
			 
			$rc
			[
			1
			]

			$Dest2
			 
			=
			 
			$rc
			[
			2
			]


			* Because waits are involved another ship may have won a race to this trade. Try again after a short wait

			$Competition
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Check.Competition
			 
			Arg1
			=
			$Mission.Type.Buy
			 
			Arg2
			=
			$Dest
			 
			Arg3
			=
			$Ware
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			if
			 
			$Competition

			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission.Free.Trader: Lost a race for a purchase. Ware=%s, Dest=%s, Dest2=%s'
			 
			arg1
			=
			$Ware
			 
			arg2
			=
			$Dest
			 
			arg3
			=
			$Dest2
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			$Action.Performed
			 
			=
			 
			1

			break

			end


			$Mission.Type
			 
			=
			 
			$Mission.Type.Buy

			$Mission.Ware
			 
			=
			 
			$Ware

			$Mission.Dest
			 
			=
			 
			$Dest

			$Mission.Dest2
			 
			=
			 
			$Dest2

			$Mission.Price
			 
			=
			 
			$Mission.Dest
			->
			 
			get
			 
			price
			 
			of
			 
			ware
			 
			$Mission.Ware


			skip
			 
			if
			 
			not
			 
			$Config
			[
			$Config.Debug.Enabled
			]

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.trace
			 
			:
			 
			comp
			=
			$Comp
			 
			lvl
			=
			5
			 
			fmt
			=
			'Select.Mission.Free.Trader: Buy %s at %s for %s'
			 
			arg1
			=
			$Mission.Ware
			 
			arg2
			=
			$Mission.Dest
			 
			arg3
			=
			$Mission.Price
			 
			arg4
			=
			null
			 
			arg5
			=
			null

			break

			end

			endsub


			* ******************************************************************************

			* State.Get:

			*  Read state from local variable

			* ******************************************************************************

			State.Get
			:

			$State
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.state
			 
			:
			 
			Func
			=
			$Lib.State.Fetch
			 
			Arg1
			=
			null
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			$Last.Mission
			 
			=
			 
			$State
			[
			$State.Last.Mission
			]

			$Last.Dest
			 
			=
			 
			$State
			[
			$State.Last.Dest
			]

			$Last.Ware
			 
			=
			 
			$State
			[
			$State.Last.Ware
			]

			$Mission.Type
			 
			=
			 
			$State
			[
			$State.Mission
			]

			$Mission.Dest
			 
			=
			 
			$State
			[
			$State.Dest
			]

			$Mission.Dest2
			 
			=
			 
			$State
			[
			$State.Dest2
			]

			$Mission.Ware
			 
			=
			 
			$State
			[
			$State.Ware
			]

			$Mission.Price
			 
			=
			 
			$State
			[
			$State.Price
			]

			$Ware.Entries
			 
			=
			 
			$State
			[
			$State.Ware.Entries
			]

			endsub


			* *****************

			* Offload.Wares:

			Offload.Wares
			:

			$Skip.Ware
			 
			=
			 
			null

			if
			 
			(
			$Last.Mission
			 
			==
			 
			$Mission.Type.Buy
			 
			AND
			 
			$Last.Dest
			 
			==
			 
			[DOCKEDAT]
			)

			$Skip.Ware
			 
			=
			 
			$Last.Ware

			end

			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.action
			 
			:
			 
			Func
			=
			$Cmd.Offload.Wares
			 
			Arg1
			=
			$Skip.Ware
			 
			Arg2
			=
			null
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null

			endsub


			return
			 
			null
