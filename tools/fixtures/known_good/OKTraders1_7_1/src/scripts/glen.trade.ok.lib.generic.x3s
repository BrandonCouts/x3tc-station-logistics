#name: glen.trade.ok.lib.generic
#lang: 44
#origin_mod: OKTraders1_7_1
#source: mods/OKTraders1_7_1/scripts/glen.trade.ok.lib.generic.xml


			* ******************************************************************************

			* OK Trade

			*  Generic optimized functions

			* ******************************************************************************


			* $Lib.Generic.Get.Minimum = 1

			* $Lib.Generic.Join.Arrays = 2

			* $Lib.Generic.Clone.Array = 3

			* $Lib.Generic.Get.Jump.Energy.For.Trip = 4

			* $Lib.Generic.Can.Jump.Trip = 5


			$rc
			 
			=
			 
			null


			if
			 
			$Func
			 
			==
			 
			1

			gosub
			 
			Lib.Generic.Get.Minimum
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			2

			gosub
			 
			Lib.Generic.Join.Arrays
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			3

			gosub
			 
			Lib.Generic.Clone.Array
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			4

			gosub
			 
			Lib.Generic.Get.Jump.Energy.For.Trip
			:

			else
			 
			if
			 
			$Func
			 
			==
			 
			5

			gosub
			 
			Lib.Generic.Can.Jump.Trip
			:

			end


			return
			 
			$rc


			* ******************************************************************************

			* Lib.Generic.Get.Minimum:

			* ******************************************************************************

			Lib.Generic.Get.Minimum
			:

			$Game.Version
			 
			=
			 
			script
			 
			engine
			 
			version

			if
			 
			(
			$Game.Version
			 
			>
			 
			49
			)

			$rc
			 
			=
			 
			get
			 
			minimum
			,
			 
			$Arg1
			,
			 
			$Arg2
			,
			 
			$Arg3
			,
			 
			$Arg4
			,
			 
			$Arg5

			else
			 
			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg1
			]
			 
			==
			 
			[DATATYPE_NULL]

			$rc
			 
			=
			 
			$Arg1

			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg2
			]
			 
			==
			 
			[DATATYPE_NULL]

			skip
			 
			if
			 
			$rc
			 
			<
			 
			$Arg2

			$rc
			 
			=
			 
			$Arg2

			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg3
			]
			 
			==
			 
			[DATATYPE_NULL]

			skip
			 
			if
			 
			$rc
			 
			<
			 
			$Arg3

			$rc
			 
			=
			 
			$Arg3

			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg4
			]
			 
			==
			 
			[DATATYPE_NULL]

			skip
			 
			if
			 
			$rc
			 
			<
			 
			$Arg4

			$rc
			 
			=
			 
			$Arg4

			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg5
			]
			 
			==
			 
			[DATATYPE_NULL]

			skip
			 
			if
			 
			$rc
			 
			<
			 
			$Arg5

			$rc
			 
			=
			 
			$Arg5

			end

			end

			end

			end

			end

			endsub


			* ******************************************************************************

			* Lib.Generic.Join.Arrays:

			*  Return a new array containing elements of Arg1 + Arg2

			* ******************************************************************************

			Lib.Generic.Join.Arrays
			:

			$Arg1.Length
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Arg1

			$Arg2.Length
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Arg2

			$Joined.Length
			 
			=
			 
			$Arg1.Length
			 
			+
			 
			$Arg2.Length

			$rc
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			$Joined.Length


			if
			 
			$Arg2.Length

			dec
			 
			$Arg2.Length

			copy
			 
			array
			 
			$Arg2
			 
			index
			 
			0
			 
			...
			 
			$Arg2.Length
			 
			into
			 
			array
			 
			$rc
			 
			at
			 
			index
			 
			$Arg1.Length

			end


			if
			 
			$Arg1.Length

			dec
			 
			$Arg1.Length

			copy
			 
			array
			 
			$Arg1
			 
			index
			 
			0
			 
			...
			 
			$Arg1.Length
			 
			into
			 
			array
			 
			$rc
			 
			at
			 
			index
			 
			0

			end

			endsub


			* ******************************************************************************

			* Lib.Generic.Clone.Array:

			* ******************************************************************************

			Lib.Generic.Clone.Array
			:

			$size
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Arg1

			if
			 
			$size

			dec
			 
			$size

			$rc
			 
			=
			 
			clone
			 
			array
			 
			$Arg1
			 
			:
			 
			index
			 
			0
			 
			...
			 
			$size

			else

			$rc
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			end

			endsub


			* ******************************************************************************

			* Lib.Generic.Get.Jump.Energy.For.Trip:

			*  Get energy required to jump the specified amount of sectors. Because

			*  separate uses of the jumpdrive incur an additional unit cost, the number

			*  of individual jumps should be specified in the segments parameter.

			*   Range = Arg1

			*   Segments = Arg2

			* ******************************************************************************

			Lib.Generic.Get.Jump.Energy.For.Trip
			:

			skip
			 
			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg2
			]
			 
			==
			 
			[DATATYPE_NULL]

			$Arg2
			 
			=
			 
			1

			$rc
			 
			=
			 
			[THIS]
			->
			 
			needed
			 
			jump
			 
			drive
			 
			energy
			 
			for
			 
			jump
			 
			to
			 
			sector
			 
			[SECTOR]

			$rc
			 
			=
			 
			$rc
			 
			*
			 
			(
			$Arg1
			 
			+
			 
			$Arg2
			)

			endsub


			* ******************************************************************************

			* Lib.Generic.Can.Jump.Trip:

			*  Whether the ship is capable of jumping a trip specified by amount of sectors

			*  and segments, where each segment means a separate jumpdrive usage that incurs

			*  one additional unit cost of energy.

			*   Range = Arg1

			*   Segments = Arg2

			*   Optional topup energy = Arg3

			* ******************************************************************************

			Lib.Generic.Can.Jump.Trip
			:

			$rc
			 
			=
			 
			[THIS]
			->
			 
			get
			 
			amount
			 
			of
			 
			ware
			 
			{Jumpdrive}
			 
			in
			 
			cargo
			 
			bay

			if
			 
			$rc

			skip
			 
			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg2
			]
			 
			==
			 
			[DATATYPE_NULL]

			$Arg2
			 
			=
			 
			1

			skip
			 
			if
			 
			not
			 
			is
			 
			datatype
			[
			$Arg3
			]
			 
			==
			 
			[DATATYPE_NULL]

			$Arg3
			 
			=
			 
			0

			$Energy.Required
			 
			=
			 
			[THIS]
			->
			 
			needed
			 
			jump
			 
			drive
			 
			energy
			 
			for
			 
			jump
			 
			to
			 
			sector
			 
			[SECTOR]

			$Energy.Required
			 
			=
			 
			$Energy.Required
			 
			*
			 
			(
			$Arg1
			 
			+
			 
			$Arg2
			)

			$Energy.Have
			 
			=
			 
			[THIS]
			->
			 
			get
			 
			amount
			 
			of
			 
			ware
			 
			{Energy Cells}
			 
			in
			 
			cargo
			 
			bay

			$Energy.Have
			 
			=
			 
			$Energy.Have
			 
			+
			 
			$Arg3

			$rc
			 
			=
			 
			(
			$Energy.Have
			 
			>=
			 
			$Energy.Required
			)

			end

			endsub
