#name: setup.glen.trade.ok
#lang: 44
#origin_mod: OKTraders1_7_1
#source: mods/OKTraders1_7_1/scripts/setup.glen.trade.ok.xml


			* ******************************************************************************

			* OK Trade

			*  Setup script

			* ******************************************************************************


			$Ver.Major
			 
			=
			 
			1

			$Ver.Minor
			 
			=
			 
			7

			$Ver.Patch
			 
			=
			 
			1

			$Required.Ware
			 
			=
			 
			{Trade Command Software MK2}

			$PageId
			 
			=
			 
			9055


			* A combined integer is handy for comparison, e.g. v1.2.3 =

			* |Maj|Min|Pch|

			* |001|002|003|

			$Ver.Internal
			 
			=
			 
			(
			$Ver.Major
			 
			*
			 
			1000000
			)
			 
			+
			 
			(
			$Ver.Minor
			 
			*
			 
			1000
			)
			 
			+
			 
			$Ver.Patch


			$Config.Ver.Major
			 
			=
			 
			0

			$Config.Ver.Minor
			 
			=
			 
			1

			$Config.Ver.Patch
			 
			=
			 
			2

			$Config.Ver.Internal
			 
			=
			 
			3

			$Config.PageId
			 
			=
			 
			4

			$Config.Debug.Enabled
			 
			=
			 
			5

			$Config.Debug.Verbosity
			 
			=
			 
			6

			$Config.Debug.Target
			 
			=
			 
			7

			$Config.Required.Ware
			 
			=
			 
			8

			$Config.Auto.Rename
			 
			=
			 
			9

			$Config.Blacklist
			 
			=
			 
			10

			$Config.Monitor.Task
			 
			=
			 
			11

			$Config.Trade.Threshold
			 
			=
			 
			12

			$Config.All.Wares
			 
			=
			 
			13

			$Config.Trade.Illegal.Wares
			 
			=
			 
			14

			$Config.Races
			 
			=
			 
			15

			$Config.Illegal.Wares
			 
			=
			 
			16

			$Config.Refuel.Percent
			 
			=
			 
			17

			$Config.Global.Balance
			 
			=
			 
			18

			$Config.Trade.Cache
			 
			=
			 
			19

			$Config.Equip
			 
			=
			 
			20

			$Config.Alert.Sound
			 
			=
			 
			21


			$State.Version
			 
			=
			 
			0

			$State.Balance
			 
			=
			 
			7


			$Lib.BigInt.Add
			 
			=
			 
			33


			$Id.Logfile.Header
			 
			=
			 
			1000

			$Id.Logbook.Installed
			 
			=
			 
			1001

			$Id.Logbook.Upgraded
			 
			=
			 
			1002

			$Id.Logbook.Downgraded
			 
			=
			 
			1003


			$Config.Equip.Ver
			 
			=
			 
			0

			$Config.Equip.Lasers
			 
			=
			 
			1

			$Config.Equip.Shields
			 
			=
			 
			2

			$Config.Equip.Missiles
			 
			=
			 
			3

			$Config.Equip.Drones
			 
			=
			 
			4

			$Config.Equip.DockingComputer
			 
			=
			 
			5

			$Config.Equip.Jumpdrive
			 
			=
			 
			6

			$Config.Equip.Triplex
			 
			=
			 
			7

			$Config.Equip.Rudder
			 
			=
			 
			8

			$Config.Equip.CargoLifeSupport
			 
			=
			 
			9

			$Config.Equip.Duplex
			 
			=
			 
			10


			$Null
			 
			=
			 
			null


			load
			 
			text
			:
			 
			id
			=
			$PageId

			$Config
			 
			=
			 
			get
			 
			global
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'


			write
			 
			to
			 
			log
			 
			file
			 
			$PageId
			 
			append
			=
			0
			 
			printf
			:
			 
			pageid
			=
			$PageId
			 
			textid
			=
			$Id.Logfile.Header
			,
			 
			$Ver.Major
			,
			 
			$Ver.Minor
			,
			 
			$Ver.Patch
			,
			 
			$Ver.Internal
			,
			 
			null


			if
			 
			not
			 
			$Config

			gosub
			 
			Create.Config
			:

			write
			 
			to
			 
			log
			 
			file
			 
			$PageId
			 
			append
			=
			1
			 
			printf
			:
			 
			fmt
			=
			'New install'
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null

			write
			 
			to
			 
			player
			 
			logbook
			:
			 
			printf
			:
			 
			pageid
			=
			$PageId
			 
			textid
			=
			$Id.Logbook.Installed
			,
			 
			$Ver.Major
			,
			 
			$Ver.Minor
			,
			 
			$Ver.Patch
			,
			 
			null
			,
			 
			null

			else

			$Existing.Ver.Internal
			 
			=
			 
			$Config
			[
			$Config.Ver.Internal
			]


			if
			 
			$Ver.Internal
			 
			<
			 
			$Existing.Ver.Internal

			gosub
			 
			Create.Config
			:

			write
			 
			to
			 
			log
			 
			file
			 
			$PageId
			 
			append
			=
			1
			 
			printf
			:
			 
			fmt
			=
			'Rollback from %s'
			,
			 
			$Existing.Ver.Internal
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null

			write
			 
			to
			 
			player
			 
			logbook
			:
			 
			printf
			:
			 
			pageid
			=
			$PageId
			 
			textid
			=
			$Id.Logbook.Downgraded
			,
			 
			$Ver.Major
			,
			 
			$Ver.Minor
			,
			 
			$Ver.Patch
			,
			 
			null
			,
			 
			null

			else
			 
			if
			 
			$Ver.Internal
			 
			>
			 
			$Existing.Ver.Internal

			gosub
			 
			Upgrade.Config
			:

			write
			 
			to
			 
			log
			 
			file
			 
			$PageId
			 
			append
			=
			1
			 
			printf
			:
			 
			fmt
			=
			'Upgrade from %s'
			,
			 
			$Existing.Ver.Internal
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null

			write
			 
			to
			 
			player
			 
			logbook
			:
			 
			printf
			:
			 
			pageid
			=
			$PageId
			 
			textid
			=
			$Id.Logbook.Upgraded
			,
			 
			$Ver.Major
			,
			 
			$Ver.Minor
			,
			 
			$Ver.Patch
			,
			 
			null
			,
			 
			null

			end

			end


			* Refresh this each time as mods can change

			gosub
			 
			Enumerate.Races
			:

			gosub
			 
			Enumerate.Wares
			:

			gosub
			 
			Enumerate.Illegal.Wares
			:

			* Prune out dead blacklist entries

			gosub
			 
			Clean.Blacklist
			:


			* The menu will show limited options when command requirements are not met

			set
			 
			script
			 
			command
			 
			upgrade
			:
			 
			command
			=
			[GLEN_OK_TRADE]
			  
			upgrade
			=
			[TRUE]

			global
			 
			script
			 
			map
			:
			 
			set
			:
			 
			key
			=
			[GLEN_OK_TRADE]
			,
			 
			class
			=
			[Moveable Ship]
			,
			 
			race
			=
			[Player]
			,
			 
			script
			=
			glen.trade.ok.cmd
			,
			 
			prio
			=
			0

			set
			 
			ship
			 
			command
			 
			preload
			 
			script
			:
			 
			command
			=
			[GLEN_OK_TRADE]
			 
			script
			=
			glen.trade.ok.menu


			return
			 
			null


			* ******************************************************************************

			* Create.Config

			*  Create the global config array

			* ******************************************************************************

			Create.Config
			:

			$Config
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			100

			set
			 
			global
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'
			 
			value
			=
			$Config

			$Config
			[
			$Config.Ver.Major
			]
			 
			=
			 
			$Ver.Major

			$Config
			[
			$Config.Ver.Minor
			]
			 
			=
			 
			$Ver.Minor

			$Config
			[
			$Config.Ver.Patch
			]
			 
			=
			 
			$Ver.Patch

			$Config
			[
			$Config.Ver.Internal
			]
			 
			=
			 
			$Ver.Internal

			$Config
			[
			$Config.PageId
			]
			 
			=
			 
			$PageId

			$Config
			[
			$Config.Debug.Enabled
			]
			 
			=
			 
			0

			$Config
			[
			$Config.Debug.Verbosity
			]
			 
			=
			 
			10

			$Config
			[
			$Config.Debug.Target
			]
			 
			=
			 
			null

			$Config
			[
			$Config.Required.Ware
			]
			 
			=
			 
			$Required.Ware

			$Config
			[
			$Config.Auto.Rename
			]
			 
			=
			 
			0

			$tmp
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Config
			[
			$Config.Blacklist
			]
			 
			=
			 
			$tmp

			$Config
			[
			$Config.Monitor.Task
			]
			 
			=
			 
			9040

			$Config
			[
			$Config.Trade.Threshold
			]
			 
			=
			 
			10

			$Config
			[
			$Config.Trade.Illegal.Wares
			]
			 
			=
			 
			0

			$Config
			[
			$Config.Refuel.Percent
			]
			 
			=
			 
			15

			$tmp
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			0
			,
			 
			0
			,
			 
			null
			,
			 
			null
			,
			 
			null

			$Config
			[
			$Config.Global.Balance
			]
			 
			=
			 
			$tmp

			gosub
			 
			Init.Trade.Cache
			:

			gosub
			 
			Init.Equip.Config
			:

			$Config
			[
			$Config.Alert.Sound
			]
			 
			=
			 
			1

			endsub


			* ******************************************************************************

			* Upgrade.Config

			*  Upgrade the global config array

			* ******************************************************************************

			Upgrade.Config
			:

			$Config
			[
			$Config.Ver.Major
			]
			 
			=
			 
			$Ver.Major

			$Config
			[
			$Config.Ver.Minor
			]
			 
			=
			 
			$Ver.Minor

			$Config
			[
			$Config.Ver.Patch
			]
			 
			=
			 
			$Ver.Patch

			$Config
			[
			$Config.Ver.Internal
			]
			 
			=
			 
			$Ver.Internal


			* Monitor task and stock threshold added in 1.1.0

			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1001000

			$Config
			[
			$Config.Monitor.Task
			]
			 
			=
			 
			9040

			$Config
			[
			$Config.Trade.Threshold
			]
			 
			=
			 
			10

			end


			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1002000

			$Config
			[
			$Config.Trade.Illegal.Wares
			]
			 
			=
			 
			0

			end


			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1002004

			$Config
			[
			$Config.Refuel.Percent
			]
			 
			=
			 
			15

			end


			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1003002

			$Global.Balance
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			0
			,
			 
			0
			,
			 
			null
			,
			 
			null
			,
			 
			null

			$Config
			[
			$Config.Global.Balance
			]
			 
			=
			 
			$Global.Balance

			gosub
			 
			Set.Initial.Balance
			:

			end


			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1004000

			gosub
			 
			Init.Trade.Cache
			:

			end


			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1005000

			gosub
			 
			Init.Equip.Config
			:

			end


			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1005001

			$Equip.Config
			 
			=
			 
			$Config
			[
			$Config.Equip
			]

			$Equip.Config
			[
			$Config.Equip.Rudder
			]
			 
			=
			 
			1

			$Config
			[
			$Config.Alert.Sound
			]
			 
			=
			 
			1

			end


			if
			 
			$Existing.Ver.Internal
			 
			<
			 
			1005003

			$Equip.Config
			 
			=
			 
			$Config
			[
			$Config.Equip
			]

			$Equip.Config
			[
			$Config.Equip.CargoLifeSupport
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.Duplex
			]
			 
			=
			 
			1

			end


			endsub


			* ******************************************************************************

			* Enumerate.Races

			*  Make an array of races

			* ******************************************************************************

			Enumerate.Races
			:

			$Races
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Config
			[
			$Config.Races
			]
			 
			=
			 
			$Races

			append
			 
			[Aldrin (Races)]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Argon]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Boron]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Enemy Race]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Friendly Race]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Goner]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Kha'ak]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Neutral Race]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Paranid]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Pirates]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Player]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Split]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Teladi]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Terran]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Xenon]
			 
			to
			 
			array
			 
			$Races

			append
			 
			[Yaki]
			 
			to
			 
			array
			 
			$Races

			endsub


			* ******************************************************************************

			* Enumerate.Wares

			*  Get every tradeable ware

			* ******************************************************************************

			Enumerate.Wares
			:

			$All.Wares
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Skip.Wares
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			{Marine}
			,
			 
			{Mercenary}
			,
			 
			null
			,
			 
			null
			,
			 
			null

			$Config
			[
			$Config.All.Wares
			]
			 
			=
			 
			$All.Wares

			$Omits
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			'^$'
			,
			 
			'.*EMP.*'
			,
			 
			'.*UNDEFINED.*'
			,
			 
			'.*ReadText.*'
			,
			 
			null

			$Maintypes
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			8
			,
			 
			9
			,
			 
			10
			,
			 
			11
			,
			 
			12

			append
			 
			13
			 
			to
			 
			array
			 
			$Maintypes

			append
			 
			14
			 
			to
			 
			array
			 
			$Maintypes

			append
			 
			15
			 
			to
			 
			array
			 
			$Maintypes

			append
			 
			16
			 
			to
			 
			array
			 
			$Maintypes


			$idx.Maintype
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Maintypes

			while
			 
			$idx.Maintype

			dec
			 
			$idx.Maintype

			$Maintype
			 
			=
			 
			$Maintypes
			[
			$idx.Maintype
			]

			$Subtype
			 
			=
			 
			get
			 
			number
			 
			of
			 
			subtypes
			 
			of
			 
			maintype
			 
			$Maintype

			while
			 
			$Subtype

			dec
			 
			$Subtype

			$Ware
			 
			=
			 
			get
			 
			ware
			 
			from
			 
			maintype
			 
			$Maintype
			 
			and
			 
			subtype
			 
			$Subtype


			while
			 
			1

			skip
			 
			if
			 
			$Ware

			break

			skip
			 
			if
			 
			not
			 
			is
			 
			upgrade
			:
			 
			ware
			=
			$Ware

			break

			skip
			 
			if
			 
			not
			 
			is
			 
			inventory
			:
			 
			ware
			=
			$Ware

			break

			skip
			 
			if
			 
			not
			 
			is
			 
			equipment
			:
			 
			ware
			=
			$Ware

			break

			skip
			 
			if
			 
			get
			 
			min
			 
			price
			 
			of
			 
			ware
			 
			$Ware

			break

			$Max
			 
			=
			 
			get
			 
			max
			 
			price
			 
			of
			 
			ware
			 
			$Ware

			skip
			 
			if
			 
			$Max
			 
			>
			 
			4

			break

			skip
			 
			if
			 
			get
			 
			average
			 
			price
			 
			of
			 
			ware
			 
			$Ware

			break

			skip
			 
			if
			 
			get
			 
			volume
			 
			of
			 
			ware
			 
			$Ware

			break

			skip
			 
			if
			 
			not
			 
			find
			 
			$Ware
			 
			in
			 
			array
			:
			 
			$Skip.Wares

			break

			$idx.Omit
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Omits

			while
			 
			$idx.Omit

			dec
			 
			$idx.Omit

			$Omit
			 
			=
			 
			$Omits
			[
			$idx.Omit
			]

			$szWare
			 
			=
			 
			sprintf
			:
			 
			fmt
			=
			'%s'
			,
			 
			$Ware
			,
			 
			null
			,
			 
			null
			,
			 
			null
			,
			 
			null

			if
			 
			match
			 
			regular
			 
			expression
			:
			 
			$Omit
			 
			to
			 
			string
			 
			$szWare

			$Ware
			 
			=
			 
			null

			break

			end

			end

			skip
			 
			if
			 
			$Ware

			break


			append
			 
			$Ware
			 
			to
			 
			array
			 
			$All.Wares

			break

			end

			end

			end

			endsub


			* ******************************************************************************

			* Enumerate.Wares

			*  Get illegal wares

			* ******************************************************************************

			Enumerate.Illegal.Wares
			:

			$Illegal.Wares
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Config
			[
			$Config.Illegal.Wares
			]
			 
			=
			 
			$Illegal.Wares


			$Wares
			 
			=
			 
			$Config
			[
			$Config.All.Wares
			]

			$Races
			 
			=
			 
			$Config
			[
			$Config.Races
			]

			$idx.Ware
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Wares

			while
			 
			$idx.Ware

			dec
			 
			$idx.Ware

			$Ware
			 
			=
			 
			$Wares
			[
			$idx.Ware
			]


			$idx.Race
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Races

			while
			 
			$idx.Race

			dec
			 
			$idx.Race

			$Race
			 
			=
			 
			$Races
			[
			$idx.Race
			]


			skip
			 
			if
			 
			not
			 
			is
			 
			ware
			 
			$Ware
			 
			illegal
			 
			in
			 
			$Race
			 
			sectors

			append
			 
			$Ware
			 
			to
			 
			array
			 
			$Illegal.Wares

			end

			end

			endsub


			* ******************************************************************************

			* Set.Initial.Balance:

			*  On upgrade to 1.3.2 or layer, set inital global balance value tosum of living trader profit.

			* ******************************************************************************

			Set.Initial.Balance
			:

			$Global.Balance
			 
			=
			 
			$Config
			[
			$Config.Global.Balance
			]


			$Ships
			 
			=
			 
			get
			 
			ship
			 
			array
			:
			 
			of
			 
			race
			 
			[Player]
			 
			class
			/
			type
			=
			[Moveable Ship]

			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Ships

			while
			 
			$idx

			dec
			 
			$idx

			$Ship
			 
			=
			 
			$Ships
			[
			$idx
			]

			$State
			 
			=
			 
			$Ship
			->
			 
			get
			 
			local
			 
			variable
			:
			 
			name
			=
			'glen.trade.ok'

			skip
			 
			if
			 
			$State

			continue

			$State.Ver
			 
			=
			 
			$State
			[
			$State.Version
			]

			skip
			 
			if
			 
			$State.Ver
			 
			>=
			 
			1002000

			continue

			$Ship.Balance
			 
			=
			 
			$State
			[
			$State.Balance
			]

			$Global.Balance
			 
			=
			 
			[THIS]
			->
			 
			call
			 
			script
			 
			glen.trade.ok.lib
			 
			:
			 
			Func
			=
			$Lib.BigInt.Add
			 
			Arg1
			=
			$Global.Balance
			 
			Arg2
			=
			$Ship.Balance
			 
			Arg3
			=
			null
			 
			Arg4
			=
			null
			 
			Arg5
			=
			null
			 
			Arg6
			=
			null

			end


			$Config
			[
			$Config.Global.Balance
			]
			 
			=
			 
			$Global.Balance

			endsub


			* ******************************************************************************

			* Init.Trade.Cache:

			*  Create global cache of in-play trades, used for checking whether a trade

			*  is already being performed

			*  [0] - Version

			*  [1] - Keys

			*  [2] - Values ... See glen.trade.ok.state for more detail

			* ******************************************************************************

			Init.Trade.Cache
			:

			$Keys
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Values
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			0

			$Cache
			 
			=
			 
			create
			 
			new
			 
			array
			,
			 
			arguments
			=
			$Ver.Internal
			,
			 
			$Keys
			,
			 
			$Values
			,
			 
			null
			,
			 
			null

			$Config
			[
			$Config.Trade.Cache
			]
			 
			=
			 
			$Cache

			endsub


			* ******************************************************************************

			* Init.Equip.Config:

			* ******************************************************************************

			Init.Equip.Config
			:

			$Equip.Config
			 
			=
			 
			array
			 
			alloc
			:
			 
			size
			=
			20

			$Config
			[
			$Config.Equip
			]
			 
			=
			 
			$Equip.Config


			$Equip.Config
			[
			$Config.Equip.Ver
			]
			 
			=
			 
			$Ver.Internal

			$Equip.Config
			[
			$Config.Equip.Lasers
			]
			 
			=
			 
			0

			$Equip.Config
			[
			$Config.Equip.Shields
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.Missiles
			]
			 
			=
			 
			0

			$Equip.Config
			[
			$Config.Equip.Drones
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.DockingComputer
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.Jumpdrive
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.Triplex
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.Rudder
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.CargoLifeSupport
			]
			 
			=
			 
			1

			$Equip.Config
			[
			$Config.Equip.Duplex
			]
			 
			=
			 
			1

			endsub


			* ******************************************************************************

			* Clean.Blacklist:

			* ******************************************************************************

			Clean.Blacklist
			:

			$Blacklist
			 
			=
			 
			$Config
			[
			$Config.Blacklist
			]

			skip
			 
			if
			 
			$Blacklist

			endsub

			* Trim out the dead wood

			$idx
			 
			=
			 
			size
			 
			of
			 
			array
			 
			$Blacklist

			while
			 
			$idx

			dec
			 
			$idx

			$Entry
			 
			=
			 
			$Blacklist
			[
			$idx
			]

			skip
			 
			if
			 
			$Entry
			->
			 
			exists

			remove
			 
			element
			 
			from
			 
			array
			 
			$Blacklist
			 
			at
			 
			index
			 
			$idx

			end

			endsub


			return
			 
			null
