{
  "shared_options": {
    "<ws>": "\\s+",
    "<var>": "\\$[A-Za-z0-9_.]+",
    "<ident>": "[A-Za-z_][A-Za-z0-9_]*",
    "<number>": "-?\\d+",
    "<bool>": "\\[(?:TRUE|FALSE)\\]",
    "<string>": "'(?:[^'\\\\]|\\\\.)*'",
    "<time_unit>": "(?:ms|s|sec|secs|seconds|m|min|mins|minutes)",
    "<value>": "(?:<var>|<number>|<string>|<bool>)",
    "<namedArg>": "<ident>\\s*=\\s*<value>",
    "<expr>": ".+",
    "<label>": "[A-Za-z0-9_.]+"
  },
  "rules": [
    {
      "name": "load text",
      "pattern": "load text: id=<id>",
      "options": {
        "<id>": "(?:<number>|<var>)"
      },
      "examples": [
        "load text: id=9055",
        "load text: id=$PageId",
        "  load text: id=10001"
      ]
    },
    {
      "name": "al register",
      "pattern": "al engine: register script=<string>",
      "options": {},
      "examples": [
        "al engine: register script='al.plugin.slx'",
        "al engine: register script='al.plugin.ecs'",
        "  al engine: register script='al.plugin.test'"
      ]
    },
    {
      "name": "al description",
      "pattern": "al engine: set plugin <string> description to <string>",
      "options": {},
      "examples": [
        "al engine: set plugin 'al.plugin.slx' description to 'SLX Station Logistics'",
        "al engine: set plugin 'al.plugin.ecs' description to 'ECS System'",
        "  al engine: set plugin 'al.plugin.test' description to 'Test Plugin'"
      ]
    },
    {
      "name": "al timer",
      "pattern": "al engine: set plugin <string> timer interval to <num> <time_unit>",
      "options": {
        "<num>": "(?:<number>|<var>)"
      },
      "examples": [
        "al engine: set plugin 'al.plugin.slx' timer interval to 30 s",
        "al engine: set plugin 'al.plugin.ecs' timer interval to 10000 ms",
        "  al engine: set plugin 'al.plugin.test' timer interval to $interval ms"
      ]
    },
    {
      "name": "stop task",
      "pattern": "\\[THIS\\]->stop task <num>",
      "options": {
        "<num>": "(?:<number>|<var>)"
      },
      "examples": [
        "[THIS]->stop task 0",
        "[THIS]->stop task 101",
        "  [THIS]->stop task $task"
      ]
    },
    {
      "name": "start task",
      "pattern": "start task <num> with script=<string> on=<target>",
      "options": {
        "<num>": "(?:<number>|<var>)",
        "<target>": "(?:<var>|\\[THIS\\])"
      },
      "examples": [
        "start task 0 with script='plugin.slx.loop' on=[THIS]",
        "start task 101 with script='lib.slx.test' on=$station",
        "  start task $task with script='lib.slx.monitor' on=[THIS]"
      ]
    },
    {
      "name": "inc|dec var",
      "pattern": "<op> <var>",
      "options": {
        "<op>": "(?:inc|dec)"
      },
      "examples": [
        "inc $counter",
        "dec $s",
        "  dec $idx"
      ]
    },
    {
      "name": "wait",
      "pattern": "= wait <number>( <time_unit>)?",
      "options": {},
      "examples": [
        "= wait 1 ms",
        "= wait 10000 ms",
        "= wait 5 s"
      ]
    },
    {
      "name": "call script",
      "pattern": "call script <string> : function=<string>(, <namedArg>)*",
      "options": {},
      "examples": [
        "call script 'lib.slx.query' : function='GetSector', station=$st",
        "call script 'lib.slx.util' : function='Min', a=$srcChunk, b=$dstChunk",
        "call script 'lib.slx.transfer' : function='ApplyMove', src=$src, dst=$dst, ware=$ware, amount=10"
      ]
    },
    {
      "name": "gosub",
      "pattern": "gosub <label>:?",
      "options": {},
      "examples": [
        "gosub init",
        "gosub do_cleanup",
        "gosub Factory.Summary.Sub:"
      ]
    },
    {
      "name": "skip if",
      "pattern": "skip if <expr>",
      "options": {},
      "examples": [
        "skip if $count > 5",
        "skip if $state == [TRUE]",
        "skip if not $found"
      ]
    },
    {
      "name": "while",
      "pattern": "while <expr>",
      "options": {},
      "examples": [
        "while $i > 0",
        "while not $done",
        "while $ships"
      ]
    },
    {
      "name": "label",
      "pattern": "<label>:",
      "options": {},
      "examples": [
        "Init.Trade.Cache:",
        "loop:",
        "Handle.Error:"
      ]
    },
    {
      "name": "return",
      "pattern": "return <ret>",
      "options": {
        "<ret>": "(?:<value>|null)"
      },
      "examples": [
        "return $result",
        "return [TRUE]",
        "return null"
      ]
    },
    {
      "name": "append to array",
      "pattern": "append <value> to array <var>",
      "options": {},
      "examples": [
        "append $ware to array $All.Wares",
        "append 5 to array $numbers",
        "  append 'foo' to array $arr"
      ]
    },
    {
      "name": "remove element",
      "pattern": "remove element from array <var> at index <value>",
      "options": {},
      "examples": [
        "remove element from array $list at index 0",
        "remove element from array $Blacklist at index $idx",
        "  remove element from array $arr at index 3"
      ]
    },
    {
      "name": "break",
      "pattern": "break",
      "options": {},
      "examples": [
        "break",
        "  break",
        "break"
      ]
    },
    {
      "name": "continue",
      "pattern": "continue",
      "options": {},
      "examples": [
        "continue",
        "  continue",
        "continue"
      ]
    },
    {
      "name": "endsub",
      "pattern": "endsub",
      "options": {},
      "examples": [
        "endsub",
        "  endsub",
        "endsub"
      ]
    },
    {
      "name": "global script map set",
      "pattern": "global script map: set: key=<ident>, class=<ident>, race=<ident>, script=<string>, prio=<num>",
      "options": {
        "<num>": "<number>"
      },
      "examples": [
        "global script map: set: key=ANARKIS_ATTACKWING, class=M1, race=Player, script='anarkis.ads.wing.attack.pl', prio=0",
        "global script map: set: key=ANARKIS_DEFENSIVEWING, class=M7, race=Player, script='anarkis.ads.wing.defense.pl', prio=0",
        "  global script map: set: key=ANARKIS_CLEANSECTOR, class=TL, race=Player, script='anarkis.acc.wing.clearsector.pl', prio=0"
      ]
    },
    {
      "name": "set script command upgrade",
      "pattern": "set script command upgrade: command=<ident> upgrade=<string>",
      "options": {},
      "examples": [
        "set script command upgrade: command=ANARKIS_ATTACKWING upgrade='Carrier Command Software'",
        "set script command upgrade: command=ANARKIS_DEFENSIVEWING upgrade='Carrier Command Software'",
        "  set script command upgrade: command=ANARKIS_CLEANSECTOR upgrade='Carrier Command Software'"
      ]
    },
    {
      "name": "set global variable",
      "pattern": "set global variable: name=<string> value=<gval>",
      "options": {
        "<gval>": "(?:<value>|null)"
      },
      "examples": [
        "set global variable: name='anarkis.acc.plugin' value=$ver",
        "set global variable: name='plugin.ecs.setup' value=[TRUE]",
        "  set global variable: name='g.slx.debug' value=null"
      ]
    },
    {
      "name": "send incoming message",
      "pattern": "send incoming message <value> to player: display it=<bool>",
      "options": {},
      "examples": [
        "send incoming message $msg to player: display it=[TRUE]",
        "send incoming message 'Hello' to player: display it=[FALSE]",
        "  send incoming message $log to player: display it=[TRUE]"
      ]
    },
    {
      "name": "generic command",
      "pattern": "<ident>.*:.*",
      "options": {},
      "examples": [
        "global script map: set: key=ANARKIS_ATTACKWING, class=M1, race=Player, script='anarkis.ads.wing.attack.pl', prio=0",
        "set script command upgrade: command=ANARKIS_ATTACKWING upgrade='Carrier Command Software'",
        "send incoming message $msg to player: display it=[TRUE]"
      ]
    }
  ]
}
