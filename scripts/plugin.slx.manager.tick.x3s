* ******************************************************************************
* SCRIPT NAME: plugin.slx.manager.tick
* DESCRIPTION: Periodic manager loop for SLX producer/consumer balancing
* AUTHOR:      SLX Team                DATE: 18 October 2025
* ******************************************************************************

$ROLE = 0
$MIN_PCT = 1
$MAX_PCT = 2
$CHUNK_PCT = 3

$IDX_STATION = 0
$IDX_ROLE = 1
$IDX_MIN = 2
$IDX_MAX = 3
$IDX_CHUNK = 4
$IDX_AMOUNT = 5
$IDX_CAP = 6
$IDX_PCT = 7
$IDX_SECTOR = 8
$IDX_AUTO = 9
$IDX_REASON = 10
$IDX_SENT = 11
$IDX_RECEIVED = 12
$IDX_MIN_UNITS = 13
$IDX_MAX_UNITS = 14

set global variable: name='g.slx.manager.running' value=[TRUE]

while [TRUE]
  $enabled = get global variable: name='g.slx.enabled'
  if $enabled == [FALSE]
    set global variable: name='g.slx.manager.running' value=[FALSE]
    return null
  end

  $wareKeys = array alloc: size=0
  $wareEntries = array alloc: size=0

  $stations = null -> call script 'lib.slx.query' : function='ListEnrolledStations'
  $sCount = size of array $stations
  while $sCount
    dec $sCount
    $st = $stations[$sCount]
    if not $st
      continue
    end
    $wares = $st -> get tradeable ware array from station
    $wCount = size of array $wares
    while $wCount
      dec $wCount
      $ware = $wares[$wCount]
      if not $ware
        continue
      end
      $cfg = null -> call script 'lib.slx.query' : function='GetStationWareConfig', station=$st, ware=$ware
      $role = $cfg[$ROLE]
      if not $role
        continue
      end
      $cap = $st -> get max amount of ware $ware that can be stored in cargo bay
      if $cap <= 0
        continue
      end
      $amount = $st -> get amount of ware $ware in cargo bay
      $pct = null -> call script 'lib.slx.util' : function='Percent', part=$amount, whole=$cap
      $chunkPct = $cfg[$CHUNK_PCT]
      $chunkUnits = null -> call script 'lib.slx.transfer' : function='ComputeChunkUnits', capacity=$cap, chunkPct=$chunkPct
      if $chunkUnits <= 0
        $chunkUnits = 1
      end

      $minUnits = null -> call script 'lib.slx.transfer' : function='CapacityForPercent', capacity=$cap, percent=$cfg[$MIN_PCT]
      $maxUnits = null -> call script 'lib.slx.transfer' : function='CapacityForPercent', capacity=$cap, percent=$cfg[$MAX_PCT]
      if $minUnits > $maxUnits
        $tmp = $minUnits
        $minUnits = $maxUnits
        $maxUnits = $tmp
      end

      $auto = [FALSE]
      if $role == 'auto'
        $auto = [TRUE]
        if $pct >= $cfg[$MAX_PCT]
          $role = 'producer'
        else if $pct <= $cfg[$MIN_PCT]
          $role = 'consumer'
        else
          $role = 'store'
        end
      end

      if not $role
        continue
      end

      $sector = $st -> get sector

      $entry = array alloc: size=15
      $entry[$IDX_STATION] = $st
      $entry[$IDX_ROLE] = $role
      $entry[$IDX_MIN] = $cfg[$MIN_PCT]
      $entry[$IDX_MAX] = $cfg[$MAX_PCT]
      $entry[$IDX_CHUNK] = $chunkUnits
      $entry[$IDX_AMOUNT] = $amount
      $entry[$IDX_CAP] = $cap
      $entry[$IDX_PCT] = $pct
      $entry[$IDX_SECTOR] = $sector
      $entry[$IDX_AUTO] = $auto
      $entry[$IDX_REASON] = 'BAL_OK'
      $entry[$IDX_SENT] = [FALSE]
      $entry[$IDX_RECEIVED] = [FALSE]
      $entry[$IDX_MIN_UNITS] = $minUnits
      $entry[$IDX_MAX_UNITS] = $maxUnits

      $wareIdx = null
      $kCount = size of array $wareKeys
      while $kCount
        dec $kCount
        if $wareKeys[$kCount] == $ware
          $wareIdx = $kCount
          break
        end
      end
      if $wareIdx == null
        $wareIdx = size of array $wareKeys
        append $ware to array $wareKeys
        $blank = array alloc: size=0
        append $blank to array $wareEntries
      end
      $entryList = $wareEntries[$wareIdx]
      append $entry to array $entryList
      $wareEntries[$wareIdx] = $entryList
      wait 1 ms
    end
    wait 1 ms
  end

  $wIndex = size of array $wareKeys
  while $wIndex
    dec $wIndex
    $currentWare = $wareKeys[$wIndex]
    $entries = $wareEntries[$wIndex]
    if size of array $entries
      gosub ProcessWare
      $wareEntries[$wIndex] = $entries
    end
    wait 5 ms
  end

  wait 10000 ms
end

return null

ProcessWare:
  $entryCount = size of array $entries
  if not $entryCount
    return null
  end

  gosub InitializeEntries
  gosub StageProducerToStore
  gosub StageStoreToConsumer
  gosub StageProducerToConsumer
  gosub StageStoreBleed
  gosub StageProducerTopUp
  gosub FinalizeReasons
  gosub StoreReasons
  return null

InitializeEntries:
  $i = size of array $entries
  while $i
    dec $i
    $entry = $entries[$i]
    $entry[$IDX_REASON] = 'BAL_OK'
    $entry[$IDX_SENT] = [FALSE]
    $entry[$IDX_RECEIVED] = [FALSE]
    $entries[$i] = $entry
  end
  return null

ResetBest:
  $bestSrcIdx = null
  $bestDstIdx = null
  $bestAmount = 0
  $bestSame = -1
  $bestTargetPct = 101
  $bestSourcePct = -1
  $bestDistance = 9999
  $reasonSend = null
  $reasonRecv = null
  return null

ConsiderCandidate:
  if $candAmount <= 0
    return null
  end
  if $candDistance == null
    $candDistance = 9999
  end
  if $candSame == null
    $candSame = 0
  end
  if $bestSrcIdx == null
    $bestSrcIdx = $candSrcIdx
    $bestDstIdx = $candDstIdx
    $bestAmount = $candAmount
    $bestSame = $candSame
    $bestTargetPct = $candTargetPct
    $bestSourcePct = $candSourcePct
    $bestDistance = $candDistance
    return null
  end
  if $candSame > $bestSame
    $bestSrcIdx = $candSrcIdx
    $bestDstIdx = $candDstIdx
    $bestAmount = $candAmount
    $bestSame = $candSame
    $bestTargetPct = $candTargetPct
    $bestSourcePct = $candSourcePct
    $bestDistance = $candDistance
    return null
  end
  if $candSame == $bestSame
    if $candTargetPct < $bestTargetPct
      $bestSrcIdx = $candSrcIdx
      $bestDstIdx = $candDstIdx
      $bestAmount = $candAmount
      $bestTargetPct = $candTargetPct
      $bestSourcePct = $candSourcePct
      $bestDistance = $candDistance
      return null
    end
    if $candTargetPct == $bestTargetPct
      if $candSourcePct > $bestSourcePct
        $bestSrcIdx = $candSrcIdx
        $bestDstIdx = $candDstIdx
        $bestAmount = $candAmount
        $bestSourcePct = $candSourcePct
        $bestDistance = $candDistance
        return null
      end
      if $candSourcePct == $bestSourcePct
        if $candDistance < $bestDistance
          $bestSrcIdx = $candSrcIdx
          $bestDstIdx = $candDstIdx
          $bestAmount = $candAmount
          $bestDistance = $candDistance
          return null
        end
        if $candDistance == $bestDistance
          if $candAmount > $bestAmount
            $bestSrcIdx = $candSrcIdx
            $bestDstIdx = $candDstIdx
            $bestAmount = $candAmount
          end
        end
      end
    end
  end
  return null

ApplyTransfer:
  if $bestSrcIdx == null
    return null
  end
  if $bestDstIdx == null
    return null
  end
  if $bestAmount <= 0
    return null
  end
  $srcEntry = $entries[$bestSrcIdx]
  $dstEntry = $entries[$bestDstIdx]
  $ok = null -> call script 'lib.slx.transfer' : function='ApplyMove', src=$srcEntry[$IDX_STATION], dst=$dstEntry[$IDX_STATION], ware=$currentWare, amount=$bestAmount
  if not $ok
    return null
  end
  $srcEntry[$IDX_AMOUNT] = $srcEntry[$IDX_AMOUNT] - $bestAmount
  if $srcEntry[$IDX_CAP] > 0
    $srcEntry[$IDX_PCT] = null -> call script 'lib.slx.util' : function='Percent', part=$srcEntry[$IDX_AMOUNT], whole=$srcEntry[$IDX_CAP]
  else
    $srcEntry[$IDX_PCT] = 0
  end
  $dstEntry[$IDX_AMOUNT] = $dstEntry[$IDX_AMOUNT] + $bestAmount
  if $dstEntry[$IDX_CAP] > 0
    $dstEntry[$IDX_PCT] = null -> call script 'lib.slx.util' : function='Percent', part=$dstEntry[$IDX_AMOUNT], whole=$dstEntry[$IDX_CAP]
  else
    $dstEntry[$IDX_PCT] = 0
  end
  $srcEntry[$IDX_SENT] = [TRUE]
  $dstEntry[$IDX_RECEIVED] = [TRUE]
  if $reasonSend
    $srcEntry[$IDX_REASON] = $reasonSend
  end
  if $reasonRecv
    $dstEntry[$IDX_REASON] = $reasonRecv
  end
  $entries[$bestSrcIdx] = $srcEntry
  $entries[$bestDstIdx] = $dstEntry
  return null

StageProducerToStore:
  while [TRUE]
    gosub ResetBest
    $i = size of array $entries
    while $i
      dec $i
      $src = $entries[$i]
      if $src[$IDX_ROLE] != 'producer'
        continue
      end
      $available = $src[$IDX_AMOUNT] - $src[$IDX_MAX_UNITS]
      if $available <= 0
        continue
      end
      $safe = $src[$IDX_AMOUNT] - $src[$IDX_MIN_UNITS]
      if $available > $safe
        $available = $safe
      end
      if $available <= 0
        continue
      end
      $srcChunk = $src[$IDX_CHUNK]
      if $srcChunk <= 0
        continue
      end
      $j = size of array $entries
      while $j
        dec $j
        if $j == $i
          continue
        end
        $dst = $entries[$j]
        if $dst[$IDX_ROLE] != 'store'
          continue
        end
        $room = $dst[$IDX_MAX_UNITS] - $dst[$IDX_AMOUNT]
        if $room <= 0
          continue
        end
        $dstChunk = $dst[$IDX_CHUNK]
        if $dstChunk <= 0
          continue
        end
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$srcChunk, b=$dstChunk
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$available
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$room
        if $amt <= 0
          continue
        end
        $candSrcIdx = $i
        $candDstIdx = $j
        $candAmount = $amt
        $candTargetPct = $dst[$IDX_PCT]
        $candSourcePct = $src[$IDX_PCT]
        $candSame = 0
        if $src[$IDX_SECTOR] == $dst[$IDX_SECTOR]
          $candSame = 1
        end
        $candDistance = get jumps from sector $src[$IDX_SECTOR] to sector $dst[$IDX_SECTOR]
        gosub ConsiderCandidate
      end
    end
    if $bestSrcIdx == null
      break
    end
    if $bestAmount <= 0
      break
    end
    $reasonSend = 'P2S'
    $reasonRecv = 'P2S_RECV'
    gosub ApplyTransfer
  end
  return null

StageStoreToConsumer:
  while [TRUE]
    gosub ResetBest
    $i = size of array $entries
    while $i
      dec $i
      $dst = $entries[$i]
      if $dst[$IDX_ROLE] != 'consumer'
        continue
      end
      $shortfall = $dst[$IDX_MIN_UNITS] - $dst[$IDX_AMOUNT]
      if $shortfall <= 0
        continue
      end
      $room = $dst[$IDX_MAX_UNITS] - $dst[$IDX_AMOUNT]
      if $room <= 0
        continue
      end
      $need = null -> call script 'lib.slx.util' : function='Min', a=$shortfall, b=$room
      if $need <= 0
        continue
      end
      $dstChunk = $dst[$IDX_CHUNK]
      if $dstChunk <= 0
        continue
      end
      $j = size of array $entries
      while $j
        dec $j
        if $j == $i
          continue
        end
        $src = $entries[$j]
        if $src[$IDX_ROLE] != 'store'
          continue
        end
        $available = $src[$IDX_AMOUNT] - $src[$IDX_MIN_UNITS]
        if $available <= 0
          continue
        end
        $srcChunk = $src[$IDX_CHUNK]
        if $srcChunk <= 0
          continue
        end
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$srcChunk, b=$dstChunk
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$available
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$need
        if $amt <= 0
          continue
        end
        $candSrcIdx = $j
        $candDstIdx = $i
        $candAmount = $amt
        $candTargetPct = $dst[$IDX_PCT]
        $candSourcePct = $src[$IDX_PCT]
        $candSame = 0
        if $src[$IDX_SECTOR] == $dst[$IDX_SECTOR]
          $candSame = 1
        end
        $candDistance = get jumps from sector $src[$IDX_SECTOR] to sector $dst[$IDX_SECTOR]
        gosub ConsiderCandidate
      end
    end
    if $bestSrcIdx == null
      break
    end
    if $bestAmount <= 0
      break
    end
    $reasonSend = 'S_BAL'
    $reasonRecv = 'S2C'
    gosub ApplyTransfer
  end
  return null

StageProducerToConsumer:
  while [TRUE]
    gosub ResetBest
    $i = size of array $entries
    while $i
      dec $i
      $dst = $entries[$i]
      if $dst[$IDX_ROLE] != 'consumer'
        continue
      end
      $room = $dst[$IDX_MAX_UNITS] - $dst[$IDX_AMOUNT]
      if $room <= 0
        continue
      end
      $dstChunk = $dst[$IDX_CHUNK]
      if $dstChunk <= 0
        continue
      end
      $j = size of array $entries
      while $j
        dec $j
        if $j == $i
          continue
        end
        $src = $entries[$j]
        if $src[$IDX_ROLE] != 'producer'
          continue
        end
        $available = $src[$IDX_AMOUNT] - $src[$IDX_MIN_UNITS]
        if $available <= 0
          continue
        end
        $srcChunk = $src[$IDX_CHUNK]
        if $srcChunk <= 0
          continue
        end
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$srcChunk, b=$dstChunk
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$available
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$room
        if $amt <= 0
          continue
        end
        $candSrcIdx = $j
        $candDstIdx = $i
        $candAmount = $amt
        $candTargetPct = $dst[$IDX_PCT]
        $candSourcePct = $src[$IDX_PCT]
        $candSame = 0
        if $src[$IDX_SECTOR] == $dst[$IDX_SECTOR]
          $candSame = 1
        end
        $candDistance = get jumps from sector $src[$IDX_SECTOR] to sector $dst[$IDX_SECTOR]
        gosub ConsiderCandidate
      end
    end
    if $bestSrcIdx == null
      break
    end
    if $bestAmount <= 0
      break
    end
    $reasonSend = 'P2C'
    $reasonRecv = 'P2S_RECV'
    gosub ApplyTransfer
  end
  return null

StageStoreBleed:
  while [TRUE]
    gosub ResetBest
    $i = size of array $entries
    while $i
      dec $i
      $src = $entries[$i]
      if $src[$IDX_ROLE] != 'store'
        continue
      end
      $excess = $src[$IDX_AMOUNT] - $src[$IDX_MAX_UNITS]
      if $excess <= 0
        continue
      end
      $safe = $src[$IDX_AMOUNT] - $src[$IDX_MIN_UNITS]
      if $excess > $safe
        $excess = $safe
      end
      if $excess <= 0
        continue
      end
      $srcChunk = $src[$IDX_CHUNK]
      if $srcChunk <= 0
        continue
      end
      $j = size of array $entries
      while $j
        dec $j
        if $j == $i
          continue
        end
        $dst = $entries[$j]
        if $dst[$IDX_ROLE] != 'consumer'
          continue
        end
        $room = $dst[$IDX_MAX_UNITS] - $dst[$IDX_AMOUNT]
        if $room <= 0
          continue
        end
        $dstChunk = $dst[$IDX_CHUNK]
        if $dstChunk <= 0
          continue
        end
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$srcChunk, b=$dstChunk
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$excess
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$room
        if $amt <= 0
          continue
        end
        $candSrcIdx = $i
        $candDstIdx = $j
        $candAmount = $amt
        $candTargetPct = $dst[$IDX_PCT]
        $candSourcePct = $src[$IDX_PCT]
        $candSame = 0
        if $src[$IDX_SECTOR] == $dst[$IDX_SECTOR]
          $candSame = 1
        end
        $candDistance = get jumps from sector $src[$IDX_SECTOR] to sector $dst[$IDX_SECTOR]
        gosub ConsiderCandidate
      end
    end
    if $bestSrcIdx == null
      break
    end
    if $bestAmount <= 0
      break
    end
    $reasonSend = 'S_BAL'
    $reasonRecv = 'S2C'
    gosub ApplyTransfer
  end
  return null

StageProducerTopUp:
  while [TRUE]
    gosub ResetBest
    $i = size of array $entries
    while $i
      dec $i
      $dst = $entries[$i]
      if $dst[$IDX_ROLE] != 'store'
        continue
      end
      $shortfall = $dst[$IDX_MIN_UNITS] - $dst[$IDX_AMOUNT]
      if $shortfall <= 0
        continue
      end
      $room = $dst[$IDX_MAX_UNITS] - $dst[$IDX_AMOUNT]
      if $room <= 0
        continue
      end
      $need = null -> call script 'lib.slx.util' : function='Min', a=$shortfall, b=$room
      if $need <= 0
        continue
      end
      $dstChunk = $dst[$IDX_CHUNK]
      if $dstChunk <= 0
        continue
      end
      $j = size of array $entries
      while $j
        dec $j
        if $j == $i
          continue
        end
        $src = $entries[$j]
        if $src[$IDX_ROLE] != 'producer'
          continue
        end
        $available = $src[$IDX_AMOUNT] - $src[$IDX_MIN_UNITS]
        if $available <= 0
          continue
        end
        $srcChunk = $src[$IDX_CHUNK]
        if $srcChunk <= 0
          continue
        end
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$srcChunk, b=$dstChunk
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$available
        $amt = null -> call script 'lib.slx.util' : function='Min', a=$amt, b=$need
        if $amt <= 0
          continue
        end
        $candSrcIdx = $j
        $candDstIdx = $i
        $candAmount = $amt
        $candTargetPct = $dst[$IDX_PCT]
        $candSourcePct = $src[$IDX_PCT]
        $candSame = 0
        if $src[$IDX_SECTOR] == $dst[$IDX_SECTOR]
          $candSame = 1
        end
        $candDistance = get jumps from sector $src[$IDX_SECTOR] to sector $dst[$IDX_SECTOR]
        gosub ConsiderCandidate
      end
    end
    if $bestSrcIdx == null
      break
    end
    if $bestAmount <= 0
      break
    end
    $reasonSend = 'P2S'
    $reasonRecv = 'P2S_RECV'
    gosub ApplyTransfer
  end
  return null

FinalizeReasons:
  $count = size of array $entries
  while $count
    dec $count
    $entry = $entries[$count]
    $reason = $entry[$IDX_REASON]
    $role = $entry[$IDX_ROLE]
    $amount = $entry[$IDX_AMOUNT]
    $minUnits = $entry[$IDX_MIN_UNITS]
    $maxUnits = $entry[$IDX_MAX_UNITS]
    if $entry[$IDX_SENT] or $entry[$IDX_RECEIVED]
      if not $reason
        $reason = 'BAL_OK'
      end
    else
      if $role == 'producer'
        if $amount <= $minUnits
          $reason = 'AT_MIN'
        else if $amount > $maxUnits
          $roomFound = [FALSE]
          $inner = size of array $entries
          while $inner
            dec $inner
            if $inner == $count
              continue
            end
            $peer = $entries[$inner]
            if $peer[$IDX_ROLE] == 'store'
              $room = $peer[$IDX_MAX_UNITS] - $peer[$IDX_AMOUNT]
              if $room > 0
                $roomFound = [TRUE]
                break
              end
            end
          end
          if not $roomFound
            $reason = 'NO_STORE'
          else
            $reason = 'BAL_OK'
          end
        else
          $reason = 'BAL_OK'
        end
      else if $role == 'consumer'
        if $amount >= $maxUnits
          $reason = 'FILLED_MAX'
        else if $amount < $minUnits
          $supply = [FALSE]
          $inner = size of array $entries
          while $inner
            dec $inner
            if $inner == $count
              continue
            end
            $peer = $entries[$inner]
            if $peer[$IDX_ROLE] == 'store'
              $avail = $peer[$IDX_AMOUNT] - $peer[$IDX_MIN_UNITS]
              if $avail > 0
                $supply = [TRUE]
                break
              end
            else if $peer[$IDX_ROLE] == 'producer'
              $avail = $peer[$IDX_AMOUNT] - $peer[$IDX_MIN_UNITS]
              if $avail > 0
                $supply = [TRUE]
                break
              end
            end
          end
          if not $supply
            $reason = 'NO_STORE'
          else
            $reason = 'BAL_OK'
          end
        else
          $reason = 'BAL_OK'
        end
      else if $role == 'store'
        if $amount <= $minUnits
          $reason = 'AT_MIN'
        else if $amount >= $maxUnits
          $reason = 'FILLED_MAX'
        else
          $reason = 'S_BAL'
        end
      else
        $reason = 'BAL_OK'
      end
    end
    if not $reason
      $reason = 'BAL_OK'
    end
    $entry[$IDX_REASON] = $reason
    $entries[$count] = $entry
  end
  return null

StoreReasons:
  $count = size of array $entries
  while $count
    dec $count
    $entry = $entries[$count]
    $code = $entry[$IDX_REASON]
    if not $code
      $code = 'BAL_OK'
    end
    if $entry[$IDX_AUTO]
      $code = sprintf: fmt='A_%s', $code
    end
    null -> call script 'lib.slx.query' : function='SetLastReason', station=$entry[$IDX_STATION], ware=$currentWare, code=$code
    wait 1 ms
  end
  return null
